"#include \"GLTF_PBR_PrecomputeCommon.fxh\"\n"
"\n"
"TextureCube  g_EnvironmentMap;\n"
"SamplerState g_EnvironmentMap_sampler;\n"
"\n"
"cbuffer FilterAttribs\n"
"{\n"
"    float4x4 g_Rotation;\n"
"\n"
"    float    g_Roughness;\n"
"    float    g_EnvMapDim;\n"
"    uint     g_NumSamples;\n"
"    float    Dummy;\n"
"}\n"
"\n"
"// Normal Distribution function\n"
"float D_GGX(float dotNH, float roughness)\n"
"{\n"
"	float alpha = roughness * roughness;\n"
"	float alpha2 = alpha * alpha;\n"
"	float denom = dotNH * dotNH * (alpha2 - 1.0) + 1.0;\n"
"	return alpha2 / (PI * denom*denom); \n"
"}\n"
"\n"
"void main(in float4  Pos      : SV_Position,\n"
"          in float3  WorldPos : WORLD_POS,\n"
"          out float4 Color    : SV_Target)\n"
"{		\n"
"	float3 N = normalize(WorldPos);\n"
"	float3 V = N;\n"
"	float3 color = float3(0.0, 0.0, 0.0);\n"
"	float totalWeight = 0.0;\n"
"	for (uint i = 0u; i < g_NumSamples; i++)\n"
"    {\n"
"		float2 Xi = hammersley2d(i, g_NumSamples);\n"
"		float3 H = importanceSample_GGX(Xi, g_Roughness, N);\n"
"		float3 L = 2.0 * dot(V, H) * H - V;\n"
"		float dotNL = clamp(dot(N, L), 0.0, 1.0);\n"
"		if (dotNL > 0.0)\n"
"        {\n"
"			// Filtering based on https://placeholderart.wordpress.com/2015/07/28/implementation-notes-runtime-environment-map-filtering-for-image-based-lighting/\n"
"\n"
"			float dotNH = clamp(dot(N, H), 0.0, 1.0);\n"
"			float dotVH = clamp(dot(V, H), 0.0, 1.0);\n"
"\n"
"			// Probability Distribution Function\n"
"			float pdf = D_GGX(dotNH, g_Roughness) * dotNH / (4.0 * dotVH) + 0.0001;\n"
"			// Slid angle of current smple\n"
"			float omegaS = 1.0 / (float(g_NumSamples) * pdf);\n"
"			// Solid angle of 1 pixel across all cube faces\n"
"			float omegaP = 4.0 * PI / (6.0 * g_EnvMapDim * g_EnvMapDim);\n"
"			// Biased (+1.0) mip level for better result\n"
"			float mipLevel = (g_Roughness == 0.0) ? 0.0 : max(0.5 * log2(omegaS / omegaP) + 1.0, 0.0f);\n"
"			color += g_EnvironmentMap.SampleLevel(g_EnvironmentMap_sampler, L, mipLevel).rgb * dotNL;\n"
"			totalWeight += dotNL;\n"
"\n"
"		}\n"
"	}\n"
"	Color =  float4((color / totalWeight), 1.0);\n"
"}\n"
