"#include \"FullScreenTriangleVSOutput.fxh\"\n"
"\n"
"#define NUM_SAMPLES 256u\n"
"#define PI          3.1415926536\n"
"\n"
"// Based omn http://byteblacksmith.com/improvements-to-the-canonical-one-liner-glsl-rand-for-opengl-es-2-0/\n"
"float random(float2 co)\n"
"{\n"
"	float a  = 12.9898;\n"
"	float b  = 78.233;\n"
"	float c  = 43758.5453;\n"
"	float dt = dot(co.xy ,float2(a,b));\n"
"	float sn = fmod(dt,3.14);\n"
"	return frac(sin(sn) * c);\n"
"}\n"
"\n"
"float2 hammersley2d(uint i, uint N) \n"
"{\n"
"	// Radical inverse based on http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html\n"
"	uint bits = (i << 16u) | (i >> 16u);\n"
"	bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);\n"
"	bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);\n"
"	bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);\n"
"	bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);\n"
"	float rdi = float(bits) * 2.3283064365386963e-10;\n"
"	return float2(float(i) /float(N), rdi);\n"
"}\n"
"\n"
"// Based on http://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_slides.pdf\n"
"float3 importanceSample_GGX(float2 Xi, float roughness, float3 normal) \n"
"{\n"
"	// Maps a 2D point to a hemisphere with spread based on roughness\n"
"	float alpha = roughness * roughness;\n"
"	float phi = 2.0 * PI * Xi.x + random(normal.xz) * 0.1;\n"
"	float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (alpha*alpha - 1.0) * Xi.y));\n"
"	float sinTheta = sqrt(1.0 - cosTheta * cosTheta);\n"
"	float3 H = float3(sinTheta * cos(phi), sinTheta * sin(phi), cosTheta);\n"
"\n"
"	// Tangent space\n"
"	float3 up = abs(normal.z) < 0.999 ? float3(0.0, 0.0, 1.0) : float3(1.0, 0.0, 0.0);\n"
"	float3 tangentX = normalize(cross(up, normal));\n"
"	float3 tangentY = normalize(cross(normal, tangentX));\n"
"\n"
"	// Convert to world Space\n"
"	return normalize(tangentX * H.x + tangentY * H.y + normal * H.z);\n"
"}\n"
"\n"
"// Geometric Shadowing function\n"
"float G_SchlicksmithGGX(float dotNL, float dotNV, float roughness)\n"
"{\n"
"	float k = (roughness * roughness) / 2.0;\n"
"	float GL = dotNL / (dotNL * (1.0 - k) + k);\n"
"	float GV = dotNV / (dotNV * (1.0 - k) + k);\n"
"	return GL * GV;\n"
"}\n"
"\n"
"float2 BRDF(float NoV, float roughness)\n"
"{\n"
"	// Normal always points along z-axis for the 2D lookup \n"
"	const float3 N = float3(0.0, 0.0, 1.0);\n"
"	float3 V = float3(sqrt(1.0 - NoV*NoV), 0.0, NoV);\n"
"\n"
"	float2 LUT = float2(0.0, 0.0);\n"
"	for(uint i = 0u; i < NUM_SAMPLES; i++)\n"
"    {\n"
"		float2 Xi = hammersley2d(i, NUM_SAMPLES);\n"
"		float3 H = importanceSample_GGX(Xi, roughness, N);\n"
"		float3 L = 2.0 * dot(V, H) * H - V;\n"
"\n"
"		float dotNL = max(dot(N, L), 0.0);\n"
"		float dotNV = max(dot(N, V), 0.0);\n"
"		float dotVH = max(dot(V, H), 0.0); \n"
"		float dotNH = max(dot(H, N), 0.0);\n"
"\n"
"		if (dotNL > 0.0)\n"
"        {\n"
"			float G     = G_SchlicksmithGGX(dotNL, dotNV, roughness);\n"
"			float G_Vis = (G * dotVH) / (dotNH * dotNV);\n"
"			float Fc    = pow(1.0 - dotVH, 5.0);\n"
"			LUT += float2((1.0 - Fc) * G_Vis, Fc * G_Vis);\n"
"		}\n"
"	}\n"
"	return LUT / float(NUM_SAMPLES);\n"
"}\n"
"\n"
"\n"
"void PrecomputeBRDF_PS(FullScreenTriangleVSOutput VSOut,\n"
"                       out float2 f2BRDF : SV_Target)\n"
"{\n"
"    f2BRDF = BRDF(VSOut.f2NormalizedXY.x, VSOut.f2NormalizedXY.y);\n"
"}\n"
