"#ifndef _BASIC_STRUCTURES_FXH_\n"
"#define _BASIC_STRUCTURES_FXH_\n"
"\n"
"\n"
"#ifdef __cplusplus\n"
"\n"
"#   ifndef BOOL\n"
"#      define BOOL int32_t // Do not use bool, because sizeof(bool)==1 !\n"
"#   endif\n"
"\n"
"#   ifndef CHECK_STRUCT_ALIGNMENT\n"
"#       define CHECK_STRUCT_ALIGNMENT(s) static_assert( sizeof(s) % 16 == 0, \"sizeof(\" #s \") is not multiple of 16\" )\n"
"#   endif\n"
"\n"
"#else\n"
"\n"
"#   ifndef BOOL\n"
"#       define BOOL bool\n"
"#   endif\n"
"\n"
"#   ifndef CHECK_STRUCT_ALIGNMENT\n"
"#       define CHECK_STRUCT_ALIGNMENT(s)\n"
"#   endif\n"
"\n"
"#endif\n"
"\n"
"\n"
"struct CascadeAttribs\n"
"{\n"
"	float4 f4LightSpaceScale;\n"
"	float4 f4LightSpaceScaledBias;\n"
"    float4 f4StartEndZ;\n"
"};\n"
"CHECK_STRUCT_ALIGNMENT(CascadeAttribs);\n"
"\n"
"\n"
"#define MAX_CASCADES 8\n"
"struct ShadowMapAttribs\n"
"{\n"
"    // 0\n"
"#ifdef __cplusplus\n"
"    float4x4 mWorldToLightViewT; // Matrices in HLSL are COLUMN-major while float4x4 is ROW major\n"
"#else\n"
"    matrix mWorldToLightView;  // Transform from view space to light projection space\n"
"#endif\n"
"    // 16\n"
"    CascadeAttribs Cascades[MAX_CASCADES];\n"
"\n"
"#ifdef __cplusplus\n"
"    float fCascadeCamSpaceZEnd[MAX_CASCADES];\n"
"    float4x4 mWorldToShadowMapUVDepthT[MAX_CASCADES];\n"
"#else\n"
"	float4 f4CascadeCamSpaceZEnd[MAX_CASCADES/4];\n"
"    matrix mWorldToShadowMapUVDepth[MAX_CASCADES];\n"
"#endif\n"
"\n"
"    // Number of shadow cascades\n"
"    int   iNumCascades;\n"
"    float fNumCascades;\n"
"    // Do not use bool, because sizeof(bool)==1 !\n"
"	BOOL  bVisualizeCascades;\n"
"    float fCascadePartitioningFactor;\n"
"};\n"
"CHECK_STRUCT_ALIGNMENT(ShadowMapAttribs);\n"
"\n"
"\n"
"struct LightAttribs\n"
"{\n"
"    float4 f4Direction;\n"
"    float4 f4AmbientLight;\n"
"    float4 f4Intensity; // Extraterrestrial sun radiance\n"
"\n"
"    ShadowMapAttribs ShadowAttribs;\n"
"};\n"
"CHECK_STRUCT_ALIGNMENT(LightAttribs);\n"
"\n"
"\n"
"struct CameraAttribs\n"
"{\n"
"    float4 f4Position;     // Camera world position\n"
"    float4 f4ViewportSize; // (width, height, 1/width, 1/height)\n"
"\n"
"    float2 f2ViewportOrigin; // (min x, min y)\n"
"    float fNearPlaneZ; \n"
"    float fFarPlaneZ; // fNearPlaneZ < fFarPlaneZ\n"
"\n"
"#ifdef __cplusplus\n"
"    float4x4 mViewT;\n"
"    float4x4 mProjT;\n"
"    float4x4 mViewProjT;\n"
"    float4x4 mViewInvT;\n"
"    float4x4 mProjInvT;\n"
"    float4x4 mViewProjInvT;\n"
"#else\n"
"    matrix mView;\n"
"    matrix mProj;\n"
"    matrix mViewProj;\n"
"    matrix mViewInv;\n"
"    matrix mProjInv;\n"
"    matrix mViewProjInv;\n"
"#endif\n"
"\n"
"    float4 f4ExtraData[5]; // Any appliation-specific data\n"
"    // Sizeof(CameraAttribs) == 256*2\n"
"};\n"
"CHECK_STRUCT_ALIGNMENT(CameraAttribs);\n"
"\n"
"\n"
"#endif //_BASIC_STRUCTURES_FXH_\n"
