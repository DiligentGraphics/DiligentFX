"// PBR shader based on the Khronos WebGL PBR implementation\n"
"// See https://github.com/KhronosGroup/glTF-WebGL-PBR\n"
"// Supports both metallic roughness and specular glossiness inputs\n"
"\n"
"#include \"BasicStructures.fxh\"\n"
"#include \"GLTF_PBR_Structures.fxh\"\n"
"#include \"GLTF_PBR_Common.fxh\"\n"
"\n"
"cbuffer cbCameraAttribs\n"
"{\n"
"    CameraAttribs g_CameraAttribs;\n"
"}\n"
"\n"
"cbuffer cbLightAttribs\n"
"{\n"
"    LightAttribs g_LightAttribs;\n"
"}\n"
"\n"
"cbuffer cbMaterialInfo\n"
"{\n"
"    GLTFMaterialInfo g_MaterialInfo;\n"
"}\n"
"\n"
"cbuffer cbRenderParameters\n"
"{\n"
"    GLTFRenderParameters g_RenderParameters;\n"
"}\n"
"\n"
"\n"
"TextureCube  g_IrradianceMap;\n"
"SamplerState g_IrradianceMap_sampler;\n"
"\n"
"TextureCube  g_PrefilteredMap;\n"
"SamplerState g_PrefilteredMap_sampler;\n"
"\n"
"Texture2D     g_BRDF_LUT;\n"
"SamplerState  g_BRDF_LUT_sampler;\n"
"\n"
"\n"
"Texture2D    g_ColorMap;\n"
"SamplerState g_ColorMap_sampler;\n"
"\n"
"Texture2D    g_PhysicalDescriptorMap;\n"
"SamplerState g_PhysicalDescriptorMap_sampler;\n"
"\n"
"Texture2D    g_NormalMap;\n"
"SamplerState g_NormalMap_sampler;\n"
"\n"
"Texture2D    g_AOMap;\n"
"SamplerState g_AOMap_sampler;\n"
"\n"
"Texture2D    g_EmissiveMap;\n"
"SamplerState g_EmissiveMap_sampler;\n"
"\n"
"// Scene bindings\n"
"\n"
"//layout (set = 0, binding = 0) uniform UBO {\n"
"//	mat4 projection;\n"
"//	mat4 model;\n"
"//	mat4 view;\n"
"//	float3 camPos;\n"
"//} ubo;\n"
"//\n"
"//layout (set = 0, binding = 1) uniform UBOParams {\n"
"\n"
"//} uboParams;\n"
"//\n"
"//\n"
"//\n"
"//layout (push_constant) uniform Material {\n"
"\n"
"//} material;\n"
"\n"
"// Encapsulate the various inputs used by the various functions in the shading equation\n"
"// We store values in this struct to simplify the integration of alternative implementations\n"
"// of the shading terms, outlined in the Readme.MD Appendix.\n"
"struct PBRInfo\n"
"{\n"
"	float  NdotL;                 // cos angle between normal and light direction\n"
"	float  NdotV;                 // cos angle between normal and view direction\n"
"	float  NdotH;                 // cos angle between normal and half floattor\n"
"	float  LdotH;                 // cos angle between light direction and half floattor\n"
"	float  VdotH;                 // cos angle between view direction and half floattor\n"
"	float  perceptualRoughness;   // roughness value, as authored by the model creator (input to shader)\n"
"	float  metalness;             // metallic value at the surface\n"
"	float3 reflectance0;          // full reflectance color (normal incidence angle)\n"
"	float3 reflectance90;         // reflectance color at grazing angle\n"
"	float  alphaRoughness;        // roughness mapped to a more linear change in the roughness (proposed by [2])\n"
"	float3 diffuseColor;          // color contribution from diffuse lighting\n"
"	float3 specularColor;         // color contribution from specular lighting\n"
"};\n"
"\n"
"#define  M_PI           3.141592653589793\n"
"#define  MIN_ROUGHNESS  0.04\n"
"\n"
"#define  MANUAL_SRGB             1\n"
"#define  SRGB_FAST_APPROXIMATION 1\n"
"\n"
"float3 Uncharted2Tonemap(float3 color)\n"
"{\n"
"	float A = 0.15;\n"
"	float B = 0.50;\n"
"	float C = 0.10;\n"
"	float D = 0.20;\n"
"	float E = 0.02;\n"
"	float F = 0.30;\n"
"	float W = 11.2;\n"
"	return ((color*(A*color+C*B)+D*E)/(color*(A*color+B)+D*F))-E/F;\n"
"}\n"
"\n"
"//float4 tonemap(float4 color)\n"
"//{\n"
"//	float3 outcol = Uncharted2Tonemap(color.rgb * uboParams.exposure);\n"
"//	outcol = outcol * (1.0f / Uncharted2Tonemap(float3(11.2f)));	\n"
"//	return float4(pow(outcol, float3(1.0f / uboParams.gamma)), color.a);\n"
"//}\n"
"\n"
"float4 SRGBtoLINEAR(float4 srgbIn)\n"
"{\n"
"#ifdef MANUAL_SRGB\n"
"#   ifdef SRGB_FAST_APPROXIMATION\n"
"	    float3 linOut = pow(srgbIn.xyz, float3(2.2, 2.2, 2.2));\n"
"#   else\n"
"	    float3 bLess  = step(float3(0.04045, 0.04045, 0.04045), srgbIn.xyz);\n"
"	    float3 linOut = mix( srgbIn.xyz/12.92, pow((srgbIn.xyz + float3(0.055, 0.055, 0.055)) / 1.055, float3(2.4, 2.4, 2.4)), bLess );\n"
"#   endif\n"
"	    return float4(linOut, srgbIn.w);\n"
"#else\n"
"	return srgbIn;\n"
"#endif\n"
"}\n"
"\n"
"#if 0\n"
"float3 TransformNormal(float3  TangentNormal,\n"
"                       float3  WorldPos,\n"
"                       float3  Normal,\n"
"                       float2  UV)\n"
"{\n"
"	// Perturb normal, see http://www.thetenthplanet.de/archives/1180\n"
"	float3 dPos_dx = ddx(WorldPos);\n"
"	float3 dPos_dy = ddy(WorldPos);\n"
"	float2 dUV_dx  = ddx(UV);\n"
"	float2 dUV_dy  = ddy(UV);\n"
"\n"
"	float3 N = normalize(Normal);\n"
"	float3 T = normalize(dPos_dx * dUV_dy.y - dPos_dy * dUV_dx.y);\n"
"	float3 B = -normalize(cross(N, T));\n"
"	float3x3 TBN = float3x3(T, B, N);\n"
"\n"
"	return normalize(TBN * TangentNormal);\n"
"}\n"
"#endif\n"
"\n"
"/*\n"
"// Calculation of the lighting contribution from an optional Image Based Light source.\n"
"// Precomputed Environment Maps are required uniform inputs and are computed as outlined in [1].\n"
"// See our README.md on Environment Maps [3] for additional discussion.\n"
"float3 getIBLContribution(PBRInfo pbrInputs, float3 n, float3 reflection)\n"
"{\n"
"	float lod = (pbrInputs.perceptualRoughness * uboParams.prefilteredCubeMipLevels);\n"
"	// retrieve a scale and bias to F0. See [1], Figure 3\n"
"	float3 brdf = (texture(samplerBRDFLUT, float2(pbrInputs.NdotV, 1.0 - pbrInputs.perceptualRoughness))).rgb;\n"
"	float3 diffuseLight = SRGBtoLINEAR(tonemap(texture(samplerIrradiance, n))).rgb;\n"
"\n"
"	float3 specularLight = SRGBtoLINEAR(tonemap(textureLod(prefilteredMap, reflection, lod))).rgb;\n"
"\n"
"	float3 diffuse = diffuseLight * pbrInputs.diffuseColor;\n"
"	float3 specular = specularLight * (pbrInputs.specularColor * brdf.x + brdf.y);\n"
"\n"
"	// For presentation, this allows us to disable IBL terms\n"
"	// For presentation, this allows us to disable IBL terms\n"
"	diffuse *= uboParams.scaleIBLAmbient;\n"
"	specular *= uboParams.scaleIBLAmbient;\n"
"\n"
"	return diffuse + specular;\n"
"}\n"
"*/\n"
"\n"
"// Basic Lambertian diffuse\n"
"// Implementation from Lambert\'s Photometria https://archive.org/details/lambertsphotome00lambgoog\n"
"// See also [1], Equation 1\n"
"float3 Diffuse(PBRInfo pbrInputs)\n"
"{\n"
"	return pbrInputs.diffuseColor / M_PI;\n"
"}\n"
"\n"
"// The following equation models the Fresnel reflectance term of the spec equation (aka F())\n"
"// Implementation of fresnel from [4], Equation 15\n"
"float3 SpecularReflection(PBRInfo pbrInputs)\n"
"{\n"
"	return pbrInputs.reflectance0 + (pbrInputs.reflectance90 - pbrInputs.reflectance0) * pow(clamp(1.0 - pbrInputs.VdotH, 0.0, 1.0), 5.0);\n"
"}\n"
"\n"
"// This calculates the specular geometric attenuation (aka G()),\n"
"// where rougher material will reflect less light back to the viewer.\n"
"// This implementation is based on [1] Equation 4, and we adopt their modifications to\n"
"// alphaRoughness as input as originally proposed in [2].\n"
"float GeometricOcclusion(PBRInfo pbrInputs)\n"
"{\n"
"	float NdotL = pbrInputs.NdotL;\n"
"	float NdotV = pbrInputs.NdotV;\n"
"	float r = pbrInputs.alphaRoughness;\n"
"\n"
"	float attenuationL = 2.0 * NdotL / (NdotL + sqrt(r * r + (1.0 - r * r) * (NdotL * NdotL)));\n"
"	float attenuationV = 2.0 * NdotV / (NdotV + sqrt(r * r + (1.0 - r * r) * (NdotV * NdotV)));\n"
"	return attenuationL * attenuationV;\n"
"}\n"
"\n"
"// The following equation(s) model the distribution of microfacet normals across the area being drawn (aka D())\n"
"// Implementation from \"Average Irregularity Representation of a Roughened Surface for Ray Reflection\" by T. S. Trowbridge, and K. P. Reitz\n"
"// Follows the distribution function recommended in the SIGGRAPH 2013 course notes from EPIC Games [1], Equation 3.\n"
"float MicrofacetDistribution(PBRInfo pbrInputs)\n"
"{\n"
"	float roughnessSq = pbrInputs.alphaRoughness * pbrInputs.alphaRoughness;\n"
"	float f = (pbrInputs.NdotH * roughnessSq - pbrInputs.NdotH) * pbrInputs.NdotH + 1.0;\n"
"	return roughnessSq / (M_PI * f * f);\n"
"}\n"
"\n"
"// Gets metallic factor from specular glossiness workflow inputs \n"
"float ConvertMetallic(float3 diffuse, float3 specular, float maxSpecular)\n"
"{\n"
"	float perceivedDiffuse = sqrt(0.299 * diffuse.r * diffuse.r + 0.587 * diffuse.g * diffuse.g + 0.114 * diffuse.b * diffuse.b);\n"
"	float perceivedSpecular = sqrt(0.299 * specular.r * specular.r + 0.587 * specular.g * specular.g + 0.114 * specular.b * specular.b);\n"
"	if (perceivedSpecular < MIN_ROUGHNESS)\n"
"    {\n"
"		return 0.0;\n"
"	}\n"
"	float a = MIN_ROUGHNESS;\n"
"	float b = perceivedDiffuse * (1.0 - maxSpecular) / (1.0 - MIN_ROUGHNESS) + perceivedSpecular - 2.0 * MIN_ROUGHNESS;\n"
"	float c = MIN_ROUGHNESS - perceivedSpecular;\n"
"	float D = max(b * b - 4.0 * a * c, 0.0);\n"
"	return clamp((-b + sqrt(D)) / (2.0 * a), 0.0, 1.0);\n"
"}\n"
"\n"
"\n"
"\n"
"void main(in  GLTF_VS_Output VSOut, \n"
"          out float4         Color : SV_Target)\n"
"{\n"
"#if 0\n"
"	float perceptualRoughness;\n"
"	float metallic;\n"
"	float3 diffuseColor;\n"
"	float4 baseColor;\n"
"\n"
"	float3 f0 = float3(0.04);\n"
"\n"
"	if (material.UseAlphaMask != 0)\n"
"    {\n"
"		if (material.baseColorTextureSet > -1)\n"
"        {\n"
"			baseColor = SRGBtoLINEAR(texture(colorMap, material.baseColorTextureSet == 0 ? VSOut.UV0 : VSOut.UV1)) * material.baseColorFactor;\n"
"		}\n"
"        else\n"
"        {\n"
"			baseColor = material.baseColorFactor;\n"
"		}\n"
"		if (baseColor.a < material.alphaMaskCutoff)\n"
"        {\n"
"			discard;\n"
"		}\n"
"	}\n"
"\n"
"	if (material.workflow == PBR_WORKFLOW_METALLIC_ROUGHNESS)\n"
"    {\n"
"		// Metallic and Roughness material properties are packed together\n"
"		// In glTF, these factors can be specified by fixed scalar values\n"
"		// or from a metallic-roughness map\n"
"		perceptualRoughness = material.roughnessFactor;\n"
"		metallic = material.metallicFactor;\n"
"		if (material.physicalDescriptorTextureSet > -1)\n"
"        {\n"
"			// Roughness is stored in the \'g\' channel, metallic is stored in the \'b\' channel.\n"
"			// This layout intentionally reserves the \'r\' channel for (optional) occlusion map data\n"
"			float4 mrSample = texture(physicalDescriptorMap, material.physicalDescriptorTextureSet == 0 ? VSOut.UV0 : VSOut.UV1);\n"
"			perceptualRoughness = mrSample.g * perceptualRoughness;\n"
"			metallic = mrSample.b * metallic;\n"
"		} else\n"
"        {\n"
"			perceptualRoughness = clamp(perceptualRoughness, MIN_ROUGHNESS, 1.0);\n"
"			metallic = clamp(metallic, 0.0, 1.0);\n"
"		}\n"
"		// Roughness is authored as perceptual roughness; as is convention,\n"
"		// convert to material roughness by squaring the perceptual roughness [2].\n"
"\n"
"		// The albedo may be defined from a base texture or a flat color\n"
"		if (material.baseColorTextureSet > -1)\n"
"        {\n"
"			baseColor = SRGBtoLINEAR(texture(colorMap, material.baseColorTextureSet == 0 ? VSOut.UV0 : VSOut.UV1)) * material.baseColorFactor;\n"
"		} else\n"
"        {\n"
"			baseColor = material.baseColorFactor;\n"
"		}\n"
"	}\n"
"\n"
"	if (material.workflow == PBR_WORKFLOW_SPECULAR_GLOSINESS)\n"
"    {\n"
"		// Values from specular glossiness workflow are converted to metallic roughness\n"
"		if (material.physicalDescriptorTextureSet > -1)\n"
"        {\n"
"			perceptualRoughness = 1.0 - texture(physicalDescriptorMap, material.physicalDescriptorTextureSet == 0 ? VSOut.UV0 : VSOut.UV1).a;\n"
"		} else\n"
"        {\n"
"			perceptualRoughness = 0.0;\n"
"		}\n"
"\n"
"		const float epsilon = 1e-6;\n"
"\n"
"		float4 diffuse = SRGBtoLINEAR(texture(colorMap, VSOut.UV0));\n"
"		float3 specular = SRGBtoLINEAR(texture(physicalDescriptorMap, VSOut.UV0)).rgb;\n"
"\n"
"		float maxSpecular = max(max(specular.r, specular.g), specular.b);\n"
"\n"
"		// Convert metallic value from specular glossiness inputs\n"
"		metallic = convertMetallic(diffuse.rgb, specular, maxSpecular);\n"
"\n"
"		float3 baseColorDiffusePart = diffuse.rgb * ((1.0 - maxSpecular) / (1 - MIN_ROUGHNESS) / max(1 - metallic, epsilon)) * material.diffuseFactor.rgb;\n"
"		float3 baseColorSpecularPart = specular - (float3(MIN_ROUGHNESS) * (1 - metallic) * (1 / max(metallic, epsilon))) * material.specularFactor.rgb;\n"
"		baseColor = float4(mix(baseColorDiffusePart, baseColorSpecularPart, metallic * metallic), diffuse.a);\n"
"\n"
"	}\n"
"\n"
"	diffuseColor = baseColor.rgb * (float3(1.0) - f0);\n"
"	diffuseColor *= 1.0 - metallic;\n"
"		\n"
"	float alphaRoughness = perceptualRoughness * perceptualRoughness;\n"
"\n"
"	float3 specularColor = mix(f0, baseColor.rgb, metallic);\n"
"\n"
"	// Compute reflectance.\n"
"	float reflectance = max(max(specularColor.r, specularColor.g), specularColor.b);\n"
"\n"
"	// For typical incident reflectance range (between 4% to 100%) set the grazing reflectance to 100% for typical fresnel effect.\n"
"	// For very low reflectance range on highly diffuse objects (below 4%), incrementally reduce grazing reflecance to 0%.\n"
"	float reflectance90 = clamp(reflectance * 25.0, 0.0, 1.0);\n"
"	float3 specularEnvironmentR0 = specularColor.rgb;\n"
"	float3 specularEnvironmentR90 = float3(1.0, 1.0, 1.0) * reflectance90;\n"
"\n"
"    float3 TangentNormal = NormalMap.Sample(NormalMap_sampler, material.normalTextureSet == 0 ? VSOut.UV0 : VSOut.UV1).xyz * 2.0 - 1.0;\n"
"	float3 n = (material.normalTextureSet > -1) ? getNormal() : normalize(inNormal);\n"
"	float3 v = normalize(ubo.camPos - inWorldPos);    // floattor from surface point to camera\n"
"	float3 l = normalize(uboParams.lightDir.xyz);     // floattor from surface point to light\n"
"	float3 h = normalize(l+v);                        // Half floattor between both l and v\n"
"	float3 reflection = -normalize(reflect(v, n));\n"
"	reflection.y *= -1.0f;\n"
"\n"
"	float NdotL = clamp(dot(n, l), 0.001, 1.0);\n"
"	float NdotV = clamp(abs(dot(n, v)), 0.001, 1.0);\n"
"	float NdotH = clamp(dot(n, h), 0.0, 1.0);\n"
"	float LdotH = clamp(dot(l, h), 0.0, 1.0);\n"
"	float VdotH = clamp(dot(v, h), 0.0, 1.0);\n"
"\n"
"	PBRInfo pbrInputs = PBRInfo(\n"
"		NdotL,\n"
"		NdotV,\n"
"		NdotH,\n"
"		LdotH,\n"
"		VdotH,\n"
"		perceptualRoughness,\n"
"		metallic,\n"
"		specularEnvironmentR0,\n"
"		specularEnvironmentR90,\n"
"		alphaRoughness,\n"
"		diffuseColor,\n"
"		specularColor\n"
"	);\n"
"\n"
"	// Calculate the shading terms for the microfacet specular shading model\n"
"	float3 F = SpecularReflection(pbrInputs);\n"
"	float  G = GeometricOcclusion(pbrInputs);\n"
"	float  D = MicrofacetDistribution(pbrInputs);\n"
"\n"
"	const float3 u_LightColor = float3(1.0);\n"
"\n"
"	// Calculation of analytical lighting contribution\n"
"	float3 diffuseContrib = (1.0 - F) * diffuse(pbrInputs);\n"
"	float3 specContrib = F * G * D / (4.0 * NdotL * NdotV);\n"
"	// Obtain final intensity as reflectance (BRDF) scaled by the energy of the light (cosine law)\n"
"	float3 color = NdotL * u_LightColor * (diffuseContrib + specContrib);\n"
"\n"
"	// Calculate lighting contribution from image based lighting source (IBL)\n"
"	color += GetIBLContribution(pbrInputs, n, reflection);\n"
"\n"
"	const float u_OcclusionStrength = 1.0f;\n"
"	// Apply optional PBR terms for additional (optional) shading\n"
"	if (material.occlusionTextureSet > -1)\n"
"    {\n"
"		float ao = texture(aoMap, (material.occlusionTextureSet == 0 ? VSOut.UV0 : VSOut.UV1)).r;\n"
"		color = mix(color, color * ao, u_OcclusionStrength);\n"
"	}\n"
"\n"
"	const float u_EmissiveFactor = 1.0f;\n"
"	if (material.emissiveTextureSet > -1)\n"
"    {\n"
"		float3 emissive = SRGBtoLINEAR(texture(emissiveMap, material.emissiveTextureSet == 0 ? VSOut.UV0 : VSOut.UV1)).rgb * u_EmissiveFactor;\n"
"		color += emissive;\n"
"	}\n"
"	\n"
"	outColor = float4(color, baseColor.a);\n"
"#endif\n"
"\n"
"\n"
"    Color = float4(1.0, 1.0, 1.0, 1.0);\n"
"\n"
"	// Shader inputs debug visualization\n"
"	if (g_RenderParameters.DebugViewType != 0)\n"
"    {\n"
"		switch (g_RenderParameters.DebugViewType)\n"
"        {\n"
"			case 1:\n"
"				Color.rgba = g_MaterialInfo.BaseColorTextureSet > -1 ? g_ColorMap.Sample(g_ColorMap_sampler, g_MaterialInfo.BaseColorTextureSet == 0 ? VSOut.UV0 : VSOut.UV1) : float4(1.0, 1.0, 1.0, 1.0);\n"
"				break;\n"
"			case 2:\n"
"				Color.rgb = (g_MaterialInfo.NormalTextureSet > -1) ? g_NormalMap.Sample(g_NormalMap_sampler, g_MaterialInfo.NormalTextureSet == 0 ? VSOut.UV0 : VSOut.UV1).rgb : normalize(VSOut.Normal);\n"
"				break;\n"
"			case 3:\n"
"				Color.rgb = (g_MaterialInfo.OcclusionTextureSet > -1) ? g_AOMap.Sample(g_AOMap_sampler, g_MaterialInfo.OcclusionTextureSet == 0 ? VSOut.UV0 : VSOut.UV1).rrr : float3(0.0, 0.0, 0.0);\n"
"				break;\n"
"			case 4:\n"
"				Color.rgb = (g_MaterialInfo.EmissiveTextureSet > -1) ? g_EmissiveMap.Sample(g_EmissiveMap_sampler, g_MaterialInfo.EmissiveTextureSet == 0 ? VSOut.UV0 : VSOut.UV1).rgb : float3(0.0, 0.0, 0.0);\n"
"				break;\n"
"			case 5:\n"
"				Color.rgb = g_PhysicalDescriptorMap.Sample(g_PhysicalDescriptorMap_sampler, VSOut.UV0).bbb;\n"
"				break;\n"
"			case 6:\n"
"				Color.rgb = g_PhysicalDescriptorMap.Sample(g_PhysicalDescriptorMap_sampler, VSOut.UV0).ggg;\n"
"				break;\n"
"		}\n"
"		Color = SRGBtoLINEAR(Color);\n"
"	}\n"
"\n"
"#if 0\n"
"	// PBR equation debug visualization\n"
"	// \"none\", \"Diff (l,n)\", \"F (l,h)\", \"G (l,v,h)\", \"D (h)\", \"Specular\"\n"
"	if (uboParams.debugViewEquation > 0.0)\n"
"    {\n"
"		int index = int(uboParams.debugViewEquation);\n"
"		switch (index)\n"
"        {\n"
"			case 1:\n"
"				outColor.rgb = diffuseContrib;\n"
"				break;\n"
"			case 2:\n"
"				outColor.rgb = F;\n"
"				break;\n"
"			case 3:\n"
"				outColor.rgb = float3(G);\n"
"				break;\n"
"			case 4: \n"
"				outColor.rgb = float3(D);\n"
"				break;\n"
"			case 5:\n"
"				outColor.rgb = specContrib;\n"
"				break;				\n"
"		}\n"
"	}\n"
"#endif\n"
"\n"
"}\n"
