"#include \"BasicStructures.fxh\"\n"
"#include \"GLTF_PBR_Structures.fxh\"\n"
"\n"
"struct GLTF_VS_Input\n"
"{\n"
"    float3 Pos     : ATTRIB0;\n"
"    float3 Normal  : ATTRIB1;\n"
"    float2 UV0     : ATTRIB2;\n"
"    float2 UV1     : ATTRIB3;\n"
"    float4 Joint0  : ATTRIB4;\n"
"    float4 Weight0 : ATTRIB5;\n"
"};\n"
"\n"
"cbuffer cbCameraAttribs\n"
"{\n"
"    CameraAttribs g_CameraAttribs;\n"
"}\n"
"\n"
"cbuffer cbTransforms\n"
"{\n"
"    GLTFNodeTransforms g_Transforms;\n"
"}\n"
"\n"
"float3x3 InverseTranspose3x3(float3x3 M)\n"
"{\n"
"    // Note that in HLSL, M_t[0] is the first row, while in GLSL, it is the \n"
"    // first column. Luckily, determinant and inverse matrix can be equally \n"
"    // defined through both rows and columns.\n"
"    float det = dot(cross(M[0], M[1]), M[2]);\n"
"    float3x3 adjugate = float3x3(cross(M[1], M[2]),\n"
"                                 cross(M[2], M[0]),\n"
"                                 cross(M[0], M[1]));\n"
"    return adjugate / det;\n"
"}\n"
"\n"
"void main(in  GLTF_VS_Input  VSIn,\n"
"          out float4 ClipPos  : SV_Position,\n"
"          out float3 WorldPos : WORLD_POS,\n"
"          out float3 Normal   : NORMAL,\n"
"          out float2 UV0      : UV0,\n"
"          out float2 UV1      : UV1) \n"
"{\n"
"    float4x4 Transform = g_Transforms.NodeMatrix;\n"
"	if (g_Transforms.JointCount > 0)\n"
"    {\n"
"		// Mesh is skinned\n"
"		float4x4 SkinMat = \n"
"			VSIn.Weight0.x * g_Transforms.JointMatrix[int(VSIn.Joint0.x)] +\n"
"			VSIn.Weight0.y * g_Transforms.JointMatrix[int(VSIn.Joint0.y)] +\n"
"			VSIn.Weight0.z * g_Transforms.JointMatrix[int(VSIn.Joint0.z)] +\n"
"			VSIn.Weight0.w * g_Transforms.JointMatrix[int(VSIn.Joint0.w)];\n"
"        Transform = mul(Transform, SkinMat);\n"
"	}\n"
"    \n"
"	float4 locPos = mul(Transform, float4(VSIn.Pos, 1.0));\n"
"    float3x3 NormalTransform = float3x3(Transform[0].xyz, Transform[1].xyz, Transform[2].xyz);\n"
"    NormalTransform = InverseTranspose3x3(NormalTransform);\n"
"    Normal = mul(NormalTransform, VSIn.Normal);\n"
"    float NormalLen = length(Normal);\n"
"    Normal /= max(NormalLen, 1e-5);\n"
"\n"
"	WorldPos = locPos.xyz / locPos.w;\n"
"	UV0      = VSIn.UV0;\n"
"	UV1      = VSIn.UV1;\n"
"	ClipPos  = mul(float4(WorldPos, 1.0), g_CameraAttribs.mViewProj);\n"
"}\n"
