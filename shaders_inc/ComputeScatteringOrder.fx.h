"#include \"AtmosphereShadersCommon.fxh\"\n"
"\n"
"#ifndef THREAD_GROUP_SIZE\n"
"#   define THREAD_GROUP_SIZE 16\n"
"#endif\n"
"\n"
"cbuffer cbParticipatingMediaScatteringParams\n"
"{\n"
"    AirScatteringAttribs g_MediaParams;\n"
"}\n"
"\n"
"Texture3D<float3> g_tex3DPointwiseSctrRadiance;\n"
"SamplerState g_tex3DPointwiseSctrRadiance_sampler;\n"
"\n"
"#include \"LookUpTables.fxh\"\n"
"#include \"PrecomputeCommon.fxh\"\n"
"\n"
"RWTexture3D</*format = rgba32f*/float3> g_rwtex3DInsctrOrder;\n"
"\n"
"// This shader computes in-scattering order for a given point and direction. It performs integration of the \n"
"// light scattered at particular point along the ray, see eq. (11) in [Bruneton and Neyret 08].\n"
"[numthreads(THREAD_GROUP_SIZE, THREAD_GROUP_SIZE, 1)]\n"
"void ComputeScatteringOrderCS(uint3 ThreadId  : SV_DispatchThreadID)\n"
"{\n"
"    // Get attributes for the current point\n"
"    float4 f4LUTCoords = LUTCoordsFromThreadID(ThreadId);\n"
"    float fHeight, fCosViewZenithAngle, fCosSunZenithAngle, fCosSunViewAngle;\n"
"    InsctrLUTCoords2WorldParams(f4LUTCoords, g_MediaParams.fAtmTopHeight, fHeight, fCosViewZenithAngle, fCosSunZenithAngle, fCosSunViewAngle );\n"
"    float3 f3EarthCentre =  - float3(0.0, 1.0, 0.0) * EARTH_RADIUS;\n"
"    float3 f3RayStart = float3(0.0, fHeight, 0.0);\n"
"    float3 f3ViewDir = ComputeViewDir(fCosViewZenithAngle);\n"
"    float3 f3DirOnLight = ComputeLightDir(f3ViewDir, fCosSunZenithAngle, fCosSunViewAngle);\n"
"    \n"
"    // Intersect the ray with the atmosphere and Earth\n"
"    float4 f4Isecs;\n"
"    GetRaySphereIntersection2( f3RayStart, f3ViewDir, f3EarthCentre, \n"
"                               float2(EARTH_RADIUS, ATM_TOP_RADIUS), \n"
"                               f4Isecs);\n"
"    float2 f2RayEarthIsecs  = f4Isecs.xy;\n"
"    float2 f2RayAtmTopIsecs = f4Isecs.zw;\n"
"\n"
"    if(f2RayAtmTopIsecs.y <= 0.0)\n"
"    {\n"
"        // This is just a sanity check and should never happen\n"
"        // as the start point is always under the top of the \n"
"        // atmosphere (look at InsctrLUTCoords2WorldParams())\n"
"        g_rwtex3DInsctrOrder[ThreadId] = F3ZERO; \n"
"        return;\n"
"    }\n"
"\n"
"    float fRayLength = f2RayAtmTopIsecs.y;\n"
"    if(f2RayEarthIsecs.x > 0.0)\n"
"        fRayLength = min(fRayLength, f2RayEarthIsecs.x);\n"
"    \n"
"    float3 f3RayEnd = f3RayStart + f3ViewDir * fRayLength;\n"
"\n"
"    const float fNumSamples = 64.0;\n"
"    float fStepLen = fRayLength / fNumSamples;\n"
"\n"
"    float4 f4UVWQ = -F4ONE;\n"
"    float3 f3PrevSctrRadiance = LookUpPrecomputedScattering(\n"
"        f3RayStart,\n"
"        f3ViewDir,\n"
"        f3EarthCentre,\n"
"        f3DirOnLight.xyz,\n"
"        g_MediaParams.fAtmTopHeight,\n"
"        g_tex3DPointwiseSctrRadiance,\n"
"        g_tex3DPointwiseSctrRadiance_sampler,\n"
"        f4UVWQ); \n"
"    float2 f2PrevParticleDensity = exp( -fHeight / PARTICLE_SCALE_HEIGHT );\n"
"\n"
"    float2 f2NetParticleDensityFromCam = F2ZERO;\n"
"    float3 f3Inscattering = F3ZERO;\n"
"\n"
"    for(float fSample=1.0; fSample <= fNumSamples; ++fSample)\n"
"    {\n"
"        float3 f3Pos = lerp(f3RayStart, f3RayEnd, fSample/fNumSamples);\n"
"\n"
"        float fCurrHeight = length(f3Pos - f3EarthCentre) - EARTH_RADIUS;\n"
"        float2 f2ParticleDensity = exp( -fCurrHeight / PARTICLE_SCALE_HEIGHT );\n"
"\n"
"        f2NetParticleDensityFromCam += (f2PrevParticleDensity + f2ParticleDensity) * (fStepLen / 2.0);\n"
"        f2PrevParticleDensity = f2ParticleDensity;\n"
"        \n"
"        // Get optical depth\n"
"        float3 f3RlghOpticalDepth = g_MediaParams.f4RayleighExtinctionCoeff.rgb * f2NetParticleDensityFromCam.x;\n"
"        float3 f3MieOpticalDepth  = g_MediaParams.f4MieExtinctionCoeff.rgb      * f2NetParticleDensityFromCam.y;\n"
"        \n"
"        // Compute extinction from the camera for the current integration point:\n"
"        float3 f3ExtinctionFromCam = exp( -(f3RlghOpticalDepth + f3MieOpticalDepth) );\n"
"\n"
"        // Get attenuated scattered light radiance in the current point\n"
"        float4 f4UVWQ = -F4ONE;\n"
"        float3 f3SctrRadiance = f3ExtinctionFromCam *\n"
"            LookUpPrecomputedScattering(\n"
"                f3Pos,\n"
"                f3ViewDir,\n"
"                f3EarthCentre,\n"
"                f3DirOnLight.xyz,\n"
"                g_MediaParams.fAtmTopHeight,\n"
"                g_tex3DPointwiseSctrRadiance,\n"
"                g_tex3DPointwiseSctrRadiance_sampler,\n"
"                f4UVWQ); \n"
"        // Update in-scattering integral\n"
"        f3Inscattering += (f3SctrRadiance +  f3PrevSctrRadiance) * (fStepLen/2.0);\n"
"        f3PrevSctrRadiance = f3SctrRadiance;\n"
"    }\n"
"\n"
"    g_rwtex3DInsctrOrder[ThreadId] = f3Inscattering;\n"
"}\n"
