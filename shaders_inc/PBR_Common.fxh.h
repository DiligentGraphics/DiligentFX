"#ifndef _PBR_COMMON_FXH_\n"
"#define _PBR_COMMON_FXH_\n"
"\n"
"#ifndef M_PI\n"
"#   define  M_PI 3.141592653589793\n"
"#endif\n"
"\n"
"// Lambertian diffuse\n"
"// see https://seblagarde.wordpress.com/2012/01/08/pi-or-not-to-pi-in-game-lighting-equation/\n"
"float3 LambertianDiffuse(float3 DiffuseColor)\n"
"{\n"
"	return DiffuseColor / M_PI;\n"
"}\n"
"\n"
"// The following equation models the Fresnel reflectance term of the spec equation (aka F())\n"
"// Implementation of fresnel from \"An Inexpensive BRDF Model for Physically based Rendering\" by Christophe Schlick\n"
"// (https://www.cs.virginia.edu/~jdl/bib/appearance/analytic%20models/schlick94b.pdf), Equation 15\n"
"float3 SchlickReflection(float VdotH, float3 reflectance0, float3 reflectance90)\n"
"{\n"
"	return reflectance0 + (reflectance90 - reflectance0) * pow(clamp(1.0 - VdotH, 0.0, 1.0), 5.0);\n"
"}\n"
"\n"
"// Smith Joint GGX\n"
"// see Eric Heitz. 2014. Understanding the Masking-Shadowing Function in Microfacet-Based BRDFs. Journal of Computer Graphics Techniques, 3\n"
"// see Real-Time Rendering. Page 331 to 336.\n"
"// see https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/geometricshadowing(specularg)\n"
"float SmithGGXVisibilityCorrelated(float NdotL, float NdotV, float AlphaRoughness)\n"
"{\n"
"    float AlphaRoughnessSq = AlphaRoughness * AlphaRoughness;\n"
"\n"
"    float GGXV = NdotL * sqrt(NdotV * NdotV * (1.0 - AlphaRoughnessSq) + AlphaRoughnessSq);\n"
"    float GGXL = NdotV * sqrt(NdotL * NdotL * (1.0 - AlphaRoughnessSq) + AlphaRoughnessSq);\n"
"\n"
"    return 0.5 / (GGXV + GGXL);\n"
"}\n"
"\n"
"// The following equation(s) model the distribution of microfacet normals across the area being drawn (aka D())\n"
"// Implementation from \"Average Irregularity Representation of a Roughened Surface for Ray Reflection\" by T. S. Trowbridge, and K. P. Reitz\n"
"// Follows the distribution function recommended in the SIGGRAPH 2013 course notes from EPIC Games [1], Equation 3.\n"
"float MicrofacetDistribution(float NdotH, float AlphaRoughness)\n"
"{\n"
"    float AlphaRoughnessSq = AlphaRoughness * AlphaRoughness;\n"
"    float f = (NdotH * AlphaRoughnessSq - NdotH) * NdotH + 1.0;\n"
"    return AlphaRoughnessSq / (M_PI * f * f);\n"
"}\n"
"\n"
"\n"
"#endif // _PBR_COMMON_FXH_\n"
