"#ifndef _PBR_TEXTURES_FXH_\n"
"#define _PBR_TEXTURES_FXH_\n"
"\n"
"#if USE_TEXTURE_ATLAS\n"
"#   include \"AtlasSampling.fxh\"\n"
"#endif\n"
"\n"
"#ifndef BaseColorTextureAttribId\n"
"#   define BaseColorTextureAttribId 0\n"
"#endif\n"
"\n"
"#ifndef PhysicalDescriptorTextureAttribId\n"
"#   define PhysicalDescriptorTextureAttribId 1\n"
"#endif\n"
"\n"
"#ifndef NormalTextureAttribId\n"
"#   define NormalTextureAttribId 2\n"
"#endif\n"
"\n"
"#ifndef OcclusionTextureAttribId\n"
"#   define OcclusionTextureAttribId 3\n"
"#endif\n"
"\n"
"#ifndef EmissiveTextureAttribId\n"
"#   define EmissiveTextureAttribId 4\n"
"#endif\n"
"\n"
"#if USE_IBL\n"
"    TextureCube  g_IrradianceMap;\n"
"    SamplerState g_IrradianceMap_sampler;\n"
"\n"
"    TextureCube  g_PrefilteredEnvMap;\n"
"    SamplerState g_PrefilteredEnvMap_sampler;\n"
"\n"
"    Texture2D     g_BRDF_LUT;\n"
"    SamplerState  g_BRDF_LUT_sampler;\n"
"#endif\n"
"\n"
"#if USE_COLOR_MAP\n"
"    Texture2DArray g_ColorMap;\n"
"    SamplerState   g_ColorMap_sampler;\n"
"#endif\n"
"\n"
"#if USE_METALLIC_MAP\n"
"    Texture2DArray g_MetallicMap;\n"
"    SamplerState   g_MetallicMap_sampler;\n"
"#endif\n"
"\n"
"#if USE_ROUGHNESS_MAP\n"
"    Texture2DArray g_RoughnessMap;\n"
"    SamplerState   g_RoughnessMap_sampler;\n"
"#endif\n"
"\n"
"#if USE_PHYS_DESC_MAP\n"
"    Texture2DArray g_PhysicalDescriptorMap;\n"
"    SamplerState   g_PhysicalDescriptorMap_sampler;\n"
"#endif\n"
"\n"
"#if USE_NORMAL_MAP\n"
"    Texture2DArray g_NormalMap;\n"
"    SamplerState   g_NormalMap_sampler;\n"
"#endif\n"
"\n"
"#if USE_AO_MAP\n"
"    Texture2DArray g_AOMap;\n"
"    SamplerState   g_AOMap_sampler;\n"
"#endif\n"
"\n"
"#if USE_EMISSIVE_MAP\n"
"    Texture2DArray g_EmissiveMap;\n"
"    SamplerState   g_EmissiveMap_sampler;\n"
"#endif\n"
"\n"
"\n"
"float2 SelectUV(VSOutput VSOut, float Selector)\n"
"{\n"
"#if USE_TEXCOORD0 && USE_TEXCOORD1\n"
"    return lerp(VSOut.UV0, VSOut.UV1, Selector);\n"
"#elif USE_TEXCOORD0\n"
"    return VSOut.UV0;\n"
"#elif USE_TEXCOORD1\n"
"    return VSOut.UV1;\n"
"#else\n"
"    return float2(0.0, 0.0);\n"
"#endif\n"
"}\n"
"\n"
"float2 ScaleAndRotateUV(float2 UV, PBRMaterialTextureAttribs TexAttribs)\n"
"{\n"
"    return mul(UV, float2x2(TexAttribs.UVScaleAndRotation.xy, TexAttribs.UVScaleAndRotation.zw));\n"
"}\n"
"\n"
"float2 TransformUV(float2 UV, PBRMaterialTextureAttribs TexAttribs)\n"
"{\n"
"    return ScaleAndRotateUV(UV, TexAttribs) + float2(TexAttribs.UBias, TexAttribs.VBias);\n"
"}\n"
"\n"
"float4 GetAtlasUVRegion(PBRMaterialTextureAttribs TexAttribs)\n"
"{\n"
"#if ENABLE_TEXCOORD_TRANSFORM\n"
"    // Note: if rotation is not a multiple of 90 degrees, the UV region will not be tight.\n"
"    //       To handle this case precisely, we will need to store texture transform and atlas\n"
"    //       scale and bias separately, which will require additional 16 bytes per texture.\n"
"    float2 UV00 = ScaleAndRotateUV(float2(0.0, 0.0), TexAttribs);\n"
"    float2 UV10 = ScaleAndRotateUV(float2(1.0, 0.0), TexAttribs);\n"
"    float2 UV01 = ScaleAndRotateUV(float2(0.0, 1.0), TexAttribs);\n"
"    float2 UV11 = ScaleAndRotateUV(float2(1.0, 1.0), TexAttribs);\n"
"    float2 UVMin = min(min(UV00, UV10), min(UV01, UV11));\n"
"    float2 UVMax = max(max(UV00, UV10), max(UV01, UV11));\n"
"    return float4(UVMax - UVMin, TexAttribs.UBias + UVMin.x, TexAttribs.VBias + UVMin.y);\n"
"#else\n"
"    return float4(TexAttribs.UVScaleAndRotation.x, TexAttribs.UVScaleAndRotation.w, TexAttribs.UBias, TexAttribs.VBias);\n"
"#endif\n"
"}\n"
"\n"
"float4 SampleTexture(Texture2DArray            Tex,\n"
"                     SamplerState              Tex_sampler,\n"
"                     VSOutput                  VSOut,\n"
"                     PBRMaterialTextureAttribs TexAttribs,\n"
"                     float4                    DefaultValue)\n"
"{\n"
"#   if USE_TEXCOORD0 || USE_TEXCOORD1\n"
"    {\n"
"        float2 UV = SelectUV(VSOut, TexAttribs.UVSelector);\n"
"#       if USE_TEXTURE_ATLAS\n"
"        {\n"
"            if (TexAttribs.UVSelector < 0.0)\n"
"            {\n"
"                return DefaultValue;\n"
"            }\n"
"            else\n"
"            {\n"
"                SampleTextureAtlasAttribs SampleAttribs;\n"
"                SampleAttribs.f2UV                   = TransformUV(frac(UV), TexAttribs);\n"
"                SampleAttribs.f2SmoothUV             = ScaleAndRotateUV(UV, TexAttribs);\n"
"                SampleAttribs.f2dSmoothUV_dx         = ScaleAndRotateUV(ddx(UV), TexAttribs);\n"
"                SampleAttribs.f2dSmoothUV_dy         = ScaleAndRotateUV(ddy(UV), TexAttribs);\n"
"                SampleAttribs.fSlice                 = TexAttribs.TextureSlice;\n"
"                SampleAttribs.f4UVRegion             = GetAtlasUVRegion(TexAttribs);\n"
"                SampleAttribs.fSmallestValidLevelDim = 4.0;\n"
"                SampleAttribs.IsNonFilterable        = false;\n"
"                SampleAttribs.fMaxAnisotropy         = 1.0; // Only used on GLES\n"
"                return SampleTextureAtlas(Tex, Tex_sampler, SampleAttribs);\n"
"            }\n"
"        }\n"
"#       else\n"
"        {\n"
"#           if ENABLE_TEXCOORD_TRANSFORM\n"
"            {\n"
"                UV = TransformUV(UV, TexAttribs);\n"
"            }\n"
"#           endif\n"
"            return Tex.Sample(Tex_sampler, float3(UV, TexAttribs.TextureSlice));\n"
"        }\n"
"#       endif\n"
"    }\n"
"#   else\n"
"    {\n"
"        return DefaultValue;\n"
"    }\n"
"#   endif\n"
"}\n"
"\n"
"float4 GetBaseColor(VSOutput              VSOut,\n"
"                    PBRMaterialShaderInfo Material)\n"
"{\n"
"    float4 BaseColor = float4(1.0, 1.0, 1.0, 1.0);\n"
"\n"
"#   if USE_COLOR_MAP\n"
"    {\n"
"        BaseColor = SampleTexture(g_ColorMap,\n"
"                                  g_ColorMap_sampler,\n"
"                                  VSOut,\n"
"                                  Material.Textures[BaseColorTextureAttribId],\n"
"                                  float4(1.0, 1.0, 1.0, 1.0));\n"
"        BaseColor = float4(TO_LINEAR(BaseColor.rgb), BaseColor.a);\n"
"    }\n"
"#   endif\n"
"\n"
"#   if USE_VERTEX_COLORS\n"
"    {\n"
"        BaseColor *= VSOut.Color;\n"
"    }\n"
"#   endif\n"
"    return BaseColor * Material.Basic.BaseColorFactor;\n"
"}\n"
"\n"
"float3 GetMicroNormal(VSOutput              VSOut,\n"
"                      PBRMaterialShaderInfo Material,\n"
"                      float2                NormalMapUV,\n"
"                      float2                dNormalMapUV_dx,\n"
"                      float2                dNormalMapUV_dy)\n"
"{\n"
"    float3 MicroNormal = float3(0.5, 0.5, 1.0);\n"
"\n"
"    PBRMaterialTextureAttribs TexAttribs = Material.Textures[NormalTextureAttribId];\n"
"#   if USE_NORMAL_MAP && (USE_TEXCOORD0 || USE_TEXCOORD1)\n"
"    {\n"
"#       if USE_TEXTURE_ATLAS\n"
"        {\n"
"            if (TexAttribs.UVSelector >= 0.0)\n"
"            {\n"
"                SampleTextureAtlasAttribs SampleAttribs;\n"
"                SampleAttribs.f2UV                   = NormalMapUV;\n"
"                SampleAttribs.f2SmoothUV             = ScaleAndRotateUV(SelectUV(VSOut, TexAttribs.UVSelector), TexAttribs);\n"
"                SampleAttribs.f2dSmoothUV_dx         = dNormalMapUV_dx;\n"
"                SampleAttribs.f2dSmoothUV_dy         = dNormalMapUV_dy;\n"
"                SampleAttribs.fSlice                 = TexAttribs.TextureSlice;\n"
"                SampleAttribs.f4UVRegion             = GetAtlasUVRegion(TexAttribs);\n"
"                SampleAttribs.fSmallestValidLevelDim = 4.0;\n"
"                SampleAttribs.IsNonFilterable        = false;\n"
"                SampleAttribs.fMaxAnisotropy         = 1.0; // Only used on GLES\n"
"                MicroNormal = SampleTextureAtlas(g_NormalMap, g_NormalMap_sampler, SampleAttribs).xyz;\n"
"            }\n"
"        }\n"
"#       else\n"
"        {\n"
"            MicroNormal = g_NormalMap.Sample(g_NormalMap_sampler, float3(NormalMapUV, TexAttribs.TextureSlice)).xyz;\n"
"        }\n"
"#       endif\n"
"    }\n"
"#endif\n"
"\n"
"    return MicroNormal * float3(2.0, 2.0, 2.0) - float3(1.0, 1.0, 1.0);\n"
"}\n"
"\n"
"float GetOcclusion(VSOutput              VSOut,\n"
"                   PBRMaterialShaderInfo Material)\n"
"{\n"
"    float Occlusion = 1.0;\n"
"#   if USE_AO_MAP\n"
"    {\n"
"        Occlusion = SampleTexture(g_AOMap,\n"
"                                  g_AOMap_sampler,\n"
"                                  VSOut,\n"
"                                  Material.Textures[OcclusionTextureAttribId],\n"
"                                  float4(1.0, 1.0, 1.0, 1.0)).r;\n"
"    }\n"
"#   endif\n"
"    return Occlusion * Material.Basic.OcclusionFactor;\n"
"}\n"
"\n"
"float3 GetEmissive(VSOutput              VSOut,\n"
"                   PBRMaterialShaderInfo Material)\n"
"{\n"
"    float3 Emissive = float3(0.0, 0.0, 0.0);\n"
"\n"
"#   if USE_EMISSIVE_MAP\n"
"    {\n"
"        Emissive = SampleTexture(g_EmissiveMap,\n"
"                                 g_EmissiveMap_sampler,\n"
"                                 VSOut,\n"
"                                 Material.Textures[EmissiveTextureAttribId],\n"
"                                 float4(0.0, 0.0, 0.0, 0.0)).rgb;\n"
"        Emissive = TO_LINEAR(Emissive);\n"
"    }\n"
"#   endif\n"
"    return Emissive * Material.Basic.EmissiveFactor.rgb;\n"
"}\n"
"\n"
"float4 GetPhysicalDesc(VSOutput              VSOut,\n"
"                       PBRMaterialShaderInfo Material)\n"
"{\n"
"    // Set defaults to 1 so that if the textures are not available, the values\n"
"    // are controlled by the metallic/roughness scale factors.\n"
"    float4 PhysicalDesc = float4(1.0, 1.0, 1.0, 1.0);\n"
"#   if USE_PHYS_DESC_MAP\n"
"    {\n"
"        PhysicalDesc = SampleTexture(g_PhysicalDescriptorMap,\n"
"                                     g_PhysicalDescriptorMap_sampler,\n"
"                                     VSOut,\n"
"                                     Material.Textures[PhysicalDescriptorTextureAttribId],\n"
"                                     float4(1.0, 1.0, 1.0, 1.0));\n"
"    }\n"
"#   else\n"
"    {\n"
"#       if USE_METALLIC_MAP\n"
"        {\n"
"            PhysicalDesc.b = SampleTexture(g_MetallicMap,\n"
"                                           g_MetallicMap_sampler,\n"
"                                           VSOut,\n"
"                                           Material.Textures[MetallicTextureAttribId],\n"
"                                           float4(1.0, 1.0, 1.0, 1.0)).r;\n"
"        }\n"
"#       endif\n"
"\n"
"#       if USE_ROUGHNESS_MAP\n"
"        {\n"
"            PhysicalDesc.g = SampleTexture(g_RoughnessMap,\n"
"                                           g_RoughnessMap_sampler,\n"
"                                           VSOut,\n"
"                                           Material.Textures[RoughnessTextureAttribId],\n"
"                                           float4(1.0, 1.0, 1.0, 1.0)).r;\n"
"\n"
"        }\n"
"#       endif\n"
"    }\n"
"#endif\n"
"\n"
"    return PhysicalDesc;\n"
"}\n"
"\n"
"#endif // _PBR_TEXTURES_FXH_\n"
