"\n"
"#include \"FullScreenTriangleVSOutput.fxh\"\n"
"#include \"BasicStructures.fxh\"\n"
"#include \"Shadows.fxh\"\n"
"\n"
"struct ConversionAttribs\n"
"{\n"
"    int iCascade;\n"
"    int iFilterRadius;\n"
"    float fEVSMPositiveExponent;\n"
"    float fEVSMNegativeExponent;\n"
"\n"
"    bool Is32BitEVSM;\n"
"};\n"
"\n"
"cbuffer cbConversionAttribs\n"
"{\n"
"    ConversionAttribs g_Attribs;\n"
"}\n"
"\n"
"Texture2DArray g_tex2DShadowMap;\n"
"\n"
"float4 VSMHorzPS(FullScreenTriangleVSOutput VSOut) : SV_Target\n"
"{\n"
"    float2 f2Moments = float2(0.0, 0.0);\n"
"    for (int i = -g_Attribs.iFilterRadius; i <= +g_Attribs.iFilterRadius; ++i)\n"
"    {\n"
"        float fDepth = g_tex2DShadowMap.Load( int4( int(VSOut.f4PixelPos.x) + i, int(VSOut.f4PixelPos.y), g_Attribs.iCascade, 0) ).r;\n"
"        f2Moments += float2(fDepth, fDepth*fDepth);\n"
"    }\n"
"    return float4(f2Moments / float(g_Attribs.iFilterRadius*2 + 1), 0.0, 0.0);\n"
"}\n"
"\n"
"float4 EVSMHorzPS(FullScreenTriangleVSOutput VSOut) : SV_Target\n"
"{\n"
"    float2 f2Exponents = GetEVSMExponents(g_Attribs.fEVSMPositiveExponent, g_Attribs.fEVSMNegativeExponent, g_Attribs.Is32BitEVSM);\n"
"\n"
"    float4 f4Moments = float4(0.0, 0.0, 0.0, 0.0);\n"
"    for (int i = -g_Attribs.iFilterRadius; i <= +g_Attribs.iFilterRadius; ++i)\n"
"    {\n"
"        float fDepth = g_tex2DShadowMap.Load( int4( int(VSOut.f4PixelPos.x) + i, int(VSOut.f4PixelPos.y), g_Attribs.iCascade, 0) ).r;\n"
"        float2 f2EVSMDepth = WarpDepthEVSM(fDepth, f2Exponents);\n"
"        f4Moments += float4(f2EVSMDepth.x, f2EVSMDepth.x*f2EVSMDepth.x, f2EVSMDepth.y, f2EVSMDepth.y*f2EVSMDepth.y);\n"
"    }\n"
"    return f4Moments / float(g_Attribs.iFilterRadius*2 + 1);\n"
"}\n"
"\n"
"float4 VertBlurPS(FullScreenTriangleVSOutput VSOut) : SV_Target\n"
"{\n"
"    float4 f4Moments = float4(0.0, 0.0, 0.0, 0.0);\n"
"    for (int i = -g_Attribs.iFilterRadius; i <= +g_Attribs.iFilterRadius; ++i)\n"
"    {\n"
"        f4Moments += g_tex2DShadowMap.Load( int4( int(VSOut.f4PixelPos.x), int(VSOut.f4PixelPos.y) + i, 0, 0) );\n"
"    }\n"
"    return f4Moments / float(g_Attribs.iFilterRadius*2 + 1);\n"
"}\n"
