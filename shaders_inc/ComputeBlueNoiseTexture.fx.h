"#include \"BasicStructures.fxh\"\n"
"#include \"FullScreenTriangleVSOutput.fxh\"\n"
"\n"
"cbuffer cbBlueNoiseAttribs\n"
"{\n"
"    uint g_FrameIndex;\n"
"}\n"
"\n"
"struct PSOutput\n"
"{\n"
"    float2 BlueNoiseXY : SV_Target0;\n"
"    float2 BlueNoiseZW : SV_Target1;\n"
"};\n"
"\n"
"Texture2D<uint> g_SobolBuffer;\n"
"Texture2D<uint> g_ScramblingTileBuffer;\n"
"\n"
"// Blue Noise Sampler by Eric Heitz. Returns a value in the range [0, 1].\n"
"float SampleRandomNumber(uint2 PixelCoord, uint SampleIndex, uint SampleDimension)\n"
"{\n"
"    // Wrap arguments\n"
"    PixelCoord = PixelCoord & 127u;\n"
"    SampleIndex = SampleIndex & 255u;\n"
"    SampleDimension = SampleDimension & 255u;\n"
"\n"
"    // xor index based on optimized ranking\n"
"    uint RankedSampleIndex = SampleIndex;\n"
"\n"
"    // Fetch value in sequence\n"
"    uint Value = g_SobolBuffer.Load(uint3(SampleDimension, RankedSampleIndex * 256u, 0));\n"
"\n"
"    // If the dimension is optimized, xor sequence value based on optimized scrambling\n"
"    uint OriginalIndex = (SampleDimension % 8u) + (PixelCoord.x + PixelCoord.y * 128u) * 8u;\n"
"    Value = Value ^ g_ScramblingTileBuffer.Load(uint3(OriginalIndex % 512u, OriginalIndex / 512u, 0)); // TODO: AMD doesn\'t support integer division\n"
"\n"
"    return (float(Value) + 0.5f) / 256.0f;\n"
"}\n"
"\n"
"// Roberts R1 sequence see - https://extremelearning.com.au/unreasonable-effectiveness-of-quasirandom-sequences/\n"
"float4 SampleRandomVector2D2D(uint2 PixelCoord)\n"
"{\n"
"    float G = 1.61803398875f;\n"
"    float Alpha = 0.5 + rcp(G) * float(g_FrameIndex & 0xFFu);\n"
"    return float4(\n"
"        frac(SampleRandomNumber(PixelCoord, 0u, 0u) + Alpha),\n"
"        frac(SampleRandomNumber(PixelCoord, 0u, 1u) + Alpha),\n"
"        frac(SampleRandomNumber(PixelCoord, 0u, 2u) + Alpha),\n"
"        frac(SampleRandomNumber(PixelCoord, 0u, 3u) + Alpha)\n"
"    );\n"
"}\n"
"\n"
"PSOutput ComputeBlueNoiseTexturePS(in FullScreenTriangleVSOutput VSOut)\n"
"{\n"
"    PSOutput Output;\n"
"    float4 BlueNoise = SampleRandomVector2D2D(uint2(VSOut.f4PixelPos.xy));\n"
"    Output.BlueNoiseXY = BlueNoise.xy;\n"
"    Output.BlueNoiseZW = BlueNoise.zw;\n"
"    return Output;\n"
"}\n"
