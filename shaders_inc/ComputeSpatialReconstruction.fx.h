"#include \"ScreenSpaceReflectionStructures.fxh\"\n"
"#include \"PBR_Common.fxh\"\n"
"#include \"SSR_Common.fxh\"\n"
"\n"
"cbuffer cbScreenSpaceReflectionAttribs\n"
"{\n"
"    ScreenSpaceReflectionAttribs g_SSRAttribs;\n"
"}\n"
"\n"
"struct PSOutput\n"
"{\n"
"    float4 ResolvedRadiance : SV_Target0;\n"
"    float  ResolvedVariance : SV_Target1;\n"
"    float  ResolvedDepth    : SV_Target2;\n"
"};\n"
"\n"
"Texture2D<float>  g_TextureRoughness;\n"
"Texture2D<float3> g_TextureNormal;\n"
"Texture2D<float>  g_TextureDepth;\n"
"Texture2D<float4> g_TextureRayDirectionPDF;\n"
"Texture2D<float4> g_TextureIntersectSpecular;\n"
"\n"
"struct PixelAreaStatistic\n"
"{\n"
"    float Mean;\n"
"    float Variance;\n"
"    float WeightSum;\n"
"    float4 ColorSum;\n"
"};\n"
"\n"
"float SampleRoughness(uint2 PixelCoord)\n"
"{\n"
"    return g_TextureRoughness.Load(int3(PixelCoord, 0));\n"
"}\n"
"\n"
"float3 SampleNormalWS(uint2 PixelCoord)\n"
"{\n"
"    return g_TextureNormal.Load(int3(PixelCoord, 0));\n"
"}\n"
"\n"
"float SampleDepth(uint2 PixelCoord)\n"
"{\n"
"    return g_TextureDepth.Load(int3(PixelCoord, 0));\n"
"}\n"
"\n"
"float2 ComputeWeightRayLength(int2 PixelCoord, float3 V, float3 N, float Roughness, float NdotV)\n"
"{\n"
"    const float4 RayDirectionPDF = g_TextureRayDirectionPDF.Load(uint3(PixelCoord, 0));\n"
"    precise const float InvRayLength = rsqrt(dot(RayDirectionPDF.xyz, RayDirectionPDF.xyz));\n"
"    if (isnan(InvRayLength))\n"
"        return float2(1.0e-6f, 1.0e-6f);\n"
"\n"
"    const float3 RayDirection = RayDirectionPDF.xyz * InvRayLength;\n"
"    const float PDF = RayDirectionPDF.w;\n"
"\n"
"    const float3 L = RayDirection;\n"
"    const float3 H = normalize(L + V);\n"
"\n"
"    const float NdotH = saturate(dot(N, H));\n"
"    const float NdotL = saturate(dot(N, L));\n"
"\n"
"    const float Vis = SmithGGXVisibilityCorrelated(NdotL, NdotV, Roughness);\n"
"    const float D = NormalDistribution_GGX(NdotH, Roughness);\n"
"    const float LocalBRDF = Vis * D * NdotL;\n"
"    return float2(max(LocalBRDF / max(PDF, 1.0e-5f), 1e-6), rcp(InvRayLength));\n"
"}\n"
"\n"
"// Weighted incremental variance\n"
"// https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance\n"
"void ComputeWeightedVariance(inout PixelAreaStatistic Stat, float4 SampleColor, float Weight)\n"
"{\n"
"    Stat.ColorSum += Weight * SampleColor;\n"
"    Stat.WeightSum += Weight;\n"
"\n"
"    const float Value = Luminance(SampleColor.rgb);\n"
"    const float PrevMean = Stat.Mean;\n"
"\n"
"    Stat.Mean += Weight * rcp(Stat.WeightSum) * (Value - PrevMean);\n"
"    Stat.Variance += Weight * (Value - PrevMean) * (Value - Stat.Mean);\n"
"}\n"
"\n"
"float ComputeResolvedDepth(float3 PositionWS, float SurfaceHitDistance)\n"
"{\n"
"    const float CameraSurfaceDistance = distance(g_SSRAttribs.CameraPosition.xyz, PositionWS);\n"
"    return CameraZToDepth(CameraSurfaceDistance + SurfaceHitDistance, g_SSRAttribs.ProjMatrix);\n"
"}\n"
"\n"
"float3 ScreenSpaceToWorldSpace(float3 ScreenCoordUV)\n"
"{\n"
"    return InvProjectPosition(ScreenCoordUV, g_SSRAttribs.InvViewProjMatrix);\n"
"}\n"
"\n"
"SSR_ATTRIBUTE_EARLY_DEPTH_STENCIL\n"
"PSOutput ComputeSpatialReconstructionPS(in float4 Position : SV_Position)\n"
"{\n"
"    CRNG Rng = InitCRND(uint2(Position.xy), 0);\n"
"\n"
"    const float2 ScreenCoordUV = Position.xy * g_SSRAttribs.InverseRenderSize;\n"
"    const float3 PositionWS = ScreenSpaceToWorldSpace(float3(ScreenCoordUV, SampleDepth(uint2(Position.xy))));\n"
"    const float3 NormalWS = SampleNormalWS(uint2(Position.xy));\n"
"    const float3 ViewWS = normalize(g_SSRAttribs.CameraPosition.xyz - PositionWS);\n"
"    const float NdotV = saturate(dot(NormalWS, ViewWS));\n"
"\n"
"    const float Roughness = SampleRoughness(uint2(Position.xy));\n"
"    const float RoughnessFactor = saturate(SSR_SPATIAL_RECONSTRUCTION_ROUGHNESS_FACTOR * sqrt(Roughness));\n"
"    const float Radius = lerp(0, g_SSRAttribs.SpatialReconstructionRadius, RoughnessFactor);\n"
"    const int SampleCount = int(lerp(1.0, float(SSR_SPATIAL_RECONSTRUCTION_SAMPLES), Radius / g_SSRAttribs.SpatialReconstructionRadius));\n"
"    const float2 RandomOffset = float2(Rand(Rng), Rand(Rng));\n"
"\n"
"    PixelAreaStatistic PixelAreaStat;\n"
"    PixelAreaStat.ColorSum = float4(0.0, 0.0, 0.0, 0.0);\n"
"    PixelAreaStat.WeightSum = 0.0;\n"
"    PixelAreaStat.Variance = 0.0;\n"
"    PixelAreaStat.Mean = 0.0;\n"
"\n"
"    float NearestSurfaceHitDistance = FLT_MAX;\n"
"\n"
"    // TODO: Try to implement sampling from https://youtu.be/MyTOGHqyquU?t=1043\n"
"    for (int SampleIdx = 0; SampleIdx < SampleCount; SampleIdx++)\n"
"    {\n"
"        const float2 Xi = 2.0 * frac(HammersleySequence(SampleIdx, SampleCount) + RandomOffset) - 1.0;\n"
"        const int2 SampleCoord = int2(Position.xy + Radius * Xi);\n"
"        if (IsInsideScreen(SampleCoord, g_SSRAttribs.RenderSize))\n"
"        {\n"
"            const float2 WeightLength = ComputeWeightRayLength(SampleCoord, ViewWS, NormalWS, Roughness, NdotV);\n"
"            const float4 SampleColor = g_TextureIntersectSpecular.Load(uint3(SampleCoord, 0));\n"
"            ComputeWeightedVariance(PixelAreaStat, SampleColor, WeightLength.x);\n"
"\n"
"            if (WeightLength.x > 1.0e-6)\n"
"                NearestSurfaceHitDistance = min(WeightLength.y, NearestSurfaceHitDistance);\n"
"        }\n"
"    }\n"
"\n"
"    PSOutput Output;\n"
"    Output.ResolvedRadiance = PixelAreaStat.ColorSum / max(PixelAreaStat.WeightSum, 1e-6f);\n"
"    Output.ResolvedVariance = PixelAreaStat.Variance / max(PixelAreaStat.WeightSum, 1e-6f);\n"
"    Output.ResolvedDepth = ComputeResolvedDepth(PositionWS, NearestSurfaceHitDistance);\n"
"    return Output;\n"
"}\n"
