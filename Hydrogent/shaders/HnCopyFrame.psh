#include "FullScreenTriangleVSOutput.fxh"
#include "SRGBUtilities.fxh"
#include "ToneMapping.fxh"
#include "CoordinateGridStructures.fxh"
#include "HnPostProcessStructures.fxh"
#include "BasicStructures.fxh"
#include "PBR_Structures.fxh"
#include "RenderPBR_Structures.fxh"

#ifdef ENABLE_GRID
#   include "CoordinateGrid.fxh"
#endif

cbuffer cbPostProcessAttribs
{
    PostProcessAttribs g_Attribs;
}

cbuffer cbFrameAttribs
{
    PBRFrameAttribs g_Frame;
}

Texture2D g_ColorBuffer;
Texture2D g_Depth;

void main(in  FullScreenTriangleVSOutput VSOut,
          out float4                     Color : SV_Target0)
{
    float4 Pos = VSOut.f4PixelPos;

    Color = g_ColorBuffer.Load(int3(Pos.xy, 0));
    
#if TONE_MAPPING_MODE > TONE_MAPPING_MODE_NONE
    Color.rgb = ToneMap(Color.rgb, g_Attribs.ToneMapping, g_Attribs.AverageLogLum);
#endif

#ifdef ENABLE_GRID
    // Compute depth range in the 3x3 neighborhood to avoid grid flickering
    // caused by temporal jittering.
    float MinDepth = 1.0;
    float MaxDepth = 0.0;
    for (int i = -1; i <= +1; ++i)
    {
        for (int j = -1; j <= +1; ++j)
        {
            float Depth = g_Depth.Load(int3(int2(Pos.xy) + int2(i, j), 0)).r;
            MinDepth = min(MinDepth, Depth);
            MaxDepth = max(MaxDepth, Depth);
        }
    }

    float4 GridColor = ComputeCoordinateGrid(VSOut.f2NormalizedXY + g_Frame.Camera.f2Jitter,
                                             g_Frame.Camera,
                                             MinDepth, MaxDepth,
                                             g_Attribs.CoordinateGrid);
    Color.rgb = lerp(Color.rgb, GridColor.rgb, GridColor.a);
#endif
    
#if CONVERT_OUTPUT_TO_SRGB
    Color.rgb = LinearToSRGB(Color.rgb);
#endif
}
