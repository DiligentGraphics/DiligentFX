#include "ToneMapping.fxh"
#include "HnPostProcessStructures.fxh"
#include "HnClosestSelectedLocation.fxh"
#include "BasicStructures.fxh"
#include "PBR_Structures.fxh"
#include "RenderPBR_Structures.fxh"
#include "PBR_Shading.fxh"
#include "FullScreenTriangleVSOutput.fxh"
#include "SRGBUtilities.fxh"

cbuffer cbPostProcessAttribs
{
    PostProcessAttribs g_Attribs;
}

cbuffer cbFrameAttribs
{
    PBRFrameAttribs g_Frame;
}

Texture2D g_ColorBuffer;
Texture2D g_SelectionDepth;
Texture2D g_Depth;
Texture2D g_ClosestSelectedLocation;
Texture2D g_SSR;
Texture2D g_SSAO;
Texture2D g_Normal;
Texture2D g_SpecularIBL;
Texture2D g_MaterialData;
Texture2D g_BaseColor;

Texture2D    g_PreintegratedGGX;
SamplerState g_PreintegratedGGX_sampler;

void main(in  FullScreenTriangleVSOutput VSOut,
          out float4                     Color : SV_Target0)
{
    float4 Pos = VSOut.f4PixelPos;

    Color = g_ColorBuffer.Load(int3(Pos.xy, 0));
    
    if (g_Attribs.SSRScale > 0.0)
    {
        float4 SpecularIBL = g_SpecularIBL.Load(int3(Pos.xy, 0));
        float4 SSRRadiance = g_SSR.Load(int3(Pos.xy, 0));
        float3 Normal      = g_Normal.Load(int3(VSOut.f4PixelPos.xy, 0)).xyz;
        float4 BaseColor   = g_BaseColor.Load(int3(Pos.xy, 0));
        float4 Material    = g_MaterialData.Load(int3(Pos.xy, 0));
    
        float Roughness = Material.x;
        float Metallic  = Material.y;
        SurfaceReflectanceInfo SrfInfo = GetSurfaceReflectanceMR(BaseColor.rgb, Metallic, Roughness);

        float4 WorldPos = mul(float4(VSOut.f2NormalizedXY, DepthToNormalizedDeviceZ(0.5), 1.0), g_Frame.Camera.mViewProjInv);
        float3 ViewDir = normalize(g_Frame.Camera.f4Position.xyz - WorldPos.xyz / WorldPos.w);
    
        IBLSamplingInfo IBLInfo = GetIBLSamplingInfo(SrfInfo,
                                                 g_PreintegratedGGX,
                                                 g_PreintegratedGGX_sampler,
                                                 Normal,
                                                 ViewDir);
    
        float3 SSR = GetSpecularIBL_GGX(SrfInfo, IBLInfo, SSRRadiance.rgb);
    
        Color.rgb += (SSR.rgb - SpecularIBL.rgb) * SSRRadiance.w * Color.a * g_Attribs.SSRScale;
    }

    if (g_Attribs.SSAOScale > 0.0)
    {
        // Since Color.rgb may be blended with background, we need to attenuate the occlusion
        // factor by transparency or there will be artifacts.
        float Occlusion = lerp(1.0, g_SSAO.Load(int3(Pos.xy, 0)).x, g_Attribs.SSAOScale * Color.a);
        Color.rgb *= Occlusion;
    }
    
#if TONE_MAPPING_MODE > TONE_MAPPING_MODE_NONE
    Color.rgb = ToneMap(Color.rgb, g_Attribs.ToneMapping, g_Attribs.AverageLogLum);
#endif

    float SelectionDepth = g_SelectionDepth.Load(int3(Pos.xy, 0)).r;
    float Depth          = g_Depth.Load(int3(Pos.xy, 0)).r;
    bool  IsSelected     = Depth != g_Attribs.ClearDepth && SelectionDepth == Depth;

    float  Outline = 0.0;
    float2 ClosestSelectedLocation;
    if (DecodeClosestSelectedLocation(g_ClosestSelectedLocation.Load(int3(Pos.xy, 0)).xy, ClosestSelectedLocation))
    {
        float Width, Height;
        g_ColorBuffer.GetDimensions(Width, Height);
        ClosestSelectedLocation *= float2(Width, Height);
        // Get distance in pixels from the current pixel to the closest selected pixel
        float Dist = length(ClosestSelectedLocation - Pos.xy);
        // Make outline fade out with distance from the closest selected pixel
        Outline = saturate(1.0 - Dist / g_Attribs.SelectionOutlineWidth);
        // Do not highlight the selected object itself
        Outline *= SelectionDepth != g_Attribs.ClearDepth ? 0.0 : 1.0;
    }

    // Desaturate all unselected pixels
    float DesatFactor = IsSelected ? 0.0 : g_Attribs.NonselectionDesaturationFactor;
    float Luminance = dot(Color.rgb, float3(0.2126, 0.7152, 0.0722));
    Color.rgb = lerp(Color.rgb, float3(Luminance, Luminance, Luminance), DesatFactor);

    Color.rgb = lerp(Color.rgb, g_Attribs.SelectionOutlineColor.rgb, Outline);

#if CONVERT_OUTPUT_TO_SRGB
    Color.rgb = LinearToSRGB(Color.rgb);
#endif
}
