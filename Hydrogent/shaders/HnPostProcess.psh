#include "ToneMapping.fxh"
#include "HnPostProcessStructures.fxh"

struct PSInput
{
    float4 Pos : SV_POSITION;
};

cbuffer cbPostProcessAttribs
{
    PostProcessAttribs g_Attribs;
}

Texture2D g_ColorBuffer;
Texture2D g_Selection;

void main(in PSInput PSIn,
          out float4 Color : SV_Target0)
{
    Color = g_ColorBuffer.Load(int3(PSIn.Pos.xy, 0));

#if TONE_MAPPING_MODE > TONE_MAPPING_MODE_NONE
    Color.rgb = ToneMap(Color.rgb, g_Attribs.ToneMapping, g_Attribs.AverageLogLum);
#endif

    // Selected rprim is rendered with negative index
    float IsSelected0 = g_Selection.Load(int3(PSIn.Pos.xy + float2(-1.0, -1.0), 0)).r;
    float IsSelected1 = g_Selection.Load(int3(PSIn.Pos.xy + float2( 0.0, -1.0), 0)).r;
    float IsSelected2 = g_Selection.Load(int3(PSIn.Pos.xy + float2(+1.0, -1.0), 0)).r;

    float IsSelected3 = g_Selection.Load(int3(PSIn.Pos.xy + float2(-1.0,  0.0), 0)).r;
    float IsSelected4 = g_Selection.Load(int3(PSIn.Pos.xy + float2( 0.0,  0.0), 0)).r;
    float IsSelected5 = g_Selection.Load(int3(PSIn.Pos.xy + float2(+1.0,  0.0), 0)).r;

    float IsSelected6 = g_Selection.Load(int3(PSIn.Pos.xy + float2(-1.0, +1.0), 0)).r;
    float IsSelected7 = g_Selection.Load(int3(PSIn.Pos.xy + float2( 0.0, +1.0), 0)).r;
    float IsSelected8 = g_Selection.Load(int3(PSIn.Pos.xy + float2(+1.0, +1.0), 0)).r;

    float Outline = IsSelected0 + IsSelected1 + IsSelected2 + IsSelected3 + IsSelected4 + IsSelected5 + IsSelected6 + IsSelected7 + IsSelected8;
    Outline = (Outline > 4.0 && Outline < 9.0) ? 1.0 : 0.0;

    float DesatFactor = g_Attribs.NonselectionDesaturationFactor * saturate(1.0 - IsSelected4);
    float Luminance = dot(Color.rgb, float3(0.2126, 0.7152, 0.0722));
    Color.rgb = lerp(Color.rgb, float3(Luminance, Luminance, Luminance), DesatFactor);

    Color.rgb = lerp(Color.rgb, g_Attribs.SelectionOutlineColor.rgb, Outline);

#if CONVERT_OUTPUT_TO_SRGB
    Color.rgb = pow(Color.rgb, float3(1.0/2.2, 1.0/2.2, 1.0/2.2));
#endif

    Color.a = 1.0;
}
