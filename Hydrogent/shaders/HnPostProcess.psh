#include "ToneMapping.fxh"
#include "HnPostProcessStructures.fxh"
#include "HnClosestSelectedLocation.fxh"

struct PSInput
{
    float4 Pos : SV_POSITION;
};

cbuffer cbPostProcessAttribs
{
    PostProcessAttribs g_Attribs;
}

Texture2D g_ColorBuffer;
Texture2D g_SelectionDepth;
Texture2D g_Depth;
Texture2D g_ClosestSelectedLocation;

void main(in PSInput PSIn,
          out float4 Color : SV_Target0)
{
    Color = g_ColorBuffer.Load(int3(PSIn.Pos.xy, 0));

#if TONE_MAPPING_MODE > TONE_MAPPING_MODE_NONE
    Color.rgb = ToneMap(Color.rgb, g_Attribs.ToneMapping, g_Attribs.AverageLogLum);
#endif

    float SelectionDepth = g_SelectionDepth.Load(int3(PSIn.Pos.xy, 0)).r;
    float Depth          = g_Depth.Load(int3(PSIn.Pos.xy, 0)).r;
    bool  IsSelected     = Depth != g_Attribs.ClearDepth && SelectionDepth == Depth;

    float  Outline = 0.0;
    float2 ClosestSelectedLocation;
    if (DecodeClosestSelectedLocation(g_ClosestSelectedLocation.Load(int3(PSIn.Pos.xy, 0)).xy, ClosestSelectedLocation))
    {
        float Width, Height;
        g_ColorBuffer.GetDimensions(Width, Height);
        float Dist = length(ClosestSelectedLocation * float2(Width, Height) - PSIn.Pos.xy);
        Outline = saturate(1.0 - Dist / g_Attribs.SelectionOutlineWidth) * (SelectionDepth != g_Attribs.ClearDepth ? 0.0 : 1.0);
    }

    // Desaturate all unselected pixels
    float DesatFactor = IsSelected ? 0.0 : g_Attribs.NonselectionDesaturationFactor;
    float Luminance = dot(Color.rgb, float3(0.2126, 0.7152, 0.0722));
    Color.rgb = lerp(Color.rgb, float3(Luminance, Luminance, Luminance), DesatFactor);

    Color.rgb = lerp(Color.rgb, g_Attribs.SelectionOutlineColor.rgb, Outline);

#if CONVERT_OUTPUT_TO_SRGB
    Color.rgb = pow(Color.rgb, float3(1.0/2.2, 1.0/2.2, 1.0/2.2));
#endif

    Color.a = 1.0;
}
