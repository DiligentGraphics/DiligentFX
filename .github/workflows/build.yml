name: Build

on: [push, pull_request]

jobs:
  #########  Pre-checks  #########
  win-precheks:
    name:    Win10 -> Pre-checks
    runs-on: windows-latest

    steps:
    - name: Clone DiligentCore
      uses: actions/checkout@v2
      with:
        repository: DiligentGraphics/DiligentCore
        path:       DiligentCore

    - name: Clone DiligentFX
      uses: actions/checkout@v2
      with:
        path: DiligentFX

    - name: Format validation
      shell: cmd
      working-directory: ${{github.workspace}}/DiligentFX/BuildTools/FormatValidation
      run: validate_format_win.bat

  linux-precheks:
    name:    Linux -> Pre-checks
    runs-on: ubuntu-latest

    steps:
    - name: Clone DiligentCore
      uses: actions/checkout@v2
      with:
        repository: DiligentGraphics/DiligentCore
        path:       DiligentCore

    - name: Clone DiligentFX
      uses: actions/checkout@v2
      with:
        path: DiligentFX

    - name: Format validation
      shell: bash
      working-directory: ${{github.workspace}}/DiligentFX/BuildTools/FormatValidation
      run: ./validate_format_linux.sh

    - name: Codespell
      uses: codespell-project/actions-codespell@master
      with:
        check_filenames: true
        ignore_words_file: ./DiligentFX/.github/.codespellignore
        skip: ./DiligentFX/.git,./DiligentFX/ThirdParty
        path: ./DiligentFX

  macos-precheks:
    name:    MacOS -> Pre-Checks
    runs-on: macos-latest

    steps:
    - name: Clone DiligentCore
      uses: actions/checkout@v2
      with:
        repository: DiligentGraphics/DiligentCore
        path:       DiligentCore

    - name: Clone DiligentFX
      uses: actions/checkout@v2
      with:
        path: DiligentFX

    - name: Format validation
      shell: bash
      working-directory: ${{github.workspace}}/DiligentFX/BuildTools/FormatValidation
      run: ./validate_format_mac.sh



  #########  Windows/UWP builds  #########
  win-build:
    needs: win-precheks
    runs-on: windows-2022

    strategy:
      matrix:
        name:            ["Win10"]
        toolset:         ["Win32", "x64"]
        build_type:      ["Debug", "Release"]
        cmake_generator: ["Visual Studio 17 2022"]
        cmake_args:      ["-DDILIGENT_NO_GLSLANG=ON -DDILIGENT_NO_HLSL=ON"]
        platform:        ["Win32"]

        include:
          - name:            "Win10-Dev"
            platform:        "Win32"
            toolset:         "x64"
            build_type:      "RelWithDebInfo"
            cmake_generator: "Visual Studio 17 2022"
            cmake_args:      "-DDILIGENT_NO_GLSLANG=ON -DDILIGENT_NO_HLSL=ON -DDILIGENT_DEVELOPMENT=ON"

          - name:            "Win8.1"
            platform:        "Win32"
            toolset:         "x64"
            build_type:      "Release"
            cmake_generator: "Visual Studio 17 2022"
            cmake_args:      "-DDILIGENT_NO_GLSLANG=ON -DDILIGENT_NO_HLSL=ON -DCMAKE_SYSTEM_VERSION=8.1"

          - name:            "Win10-Ninja"
            platform:        "Win32"
            toolset:         "x64"
            build_type:      "Debug"
            cmake_generator: "Ninja"
            cmake_args:      "-DDILIGENT_NO_GLSLANG=ON -DDILIGENT_NO_HLSL=ON"

          - name:            "MinGW"
            platform:        "Win32"
            toolset:         "x64"
            build_type:      "Release"
            cmake_generator: "MinGW Makefiles"
            cmake_args:      "-DDILIGENT_NO_GLSLANG=ON -DDILIGENT_NO_HLSL=ON"

          - name:            "UWP"
            platform:        "UWP"
            toolset:         "x64"
            build_type:      "Debug"
            cmake_generator: "Visual Studio 17 2022"
            cmake_args:      "-DCMAKE_SYSTEM_NAME=WindowsStore -DCMAKE_SYSTEM_VERSION=10.0"

          - name:            "UWP"
            platform:        "UWP"
            toolset:         "x64"
            build_type:      "Release"
            cmake_generator: "Visual Studio 17 2022"
            cmake_args:      "-DCMAKE_SYSTEM_NAME=WindowsStore -DCMAKE_SYSTEM_VERSION=10.0"

    name: Win10 -> ${{ matrix.name }}-${{ matrix.toolset }}, ${{ matrix.build_type }}

    steps:
    - name: Checkout
      uses: DiligentGraphics/github-action/checkout@v1

    - name: Set up build environment
      if: success()
      uses: DiligentGraphics/github-action/setup-build-env@v1
      with:
        platform:        ${{ matrix.platform }}
        cmake-generator: ${{ matrix.cmake_generator }}
        ninja-vs-arch:   ${{ matrix.toolset }}

    - name: Configure CMake
      if: success()
      uses: DiligentGraphics/github-action/configure-cmake@v1
      with:
        generator:  ${{ matrix.cmake_generator }}
        vs-arch:    ${{ matrix.toolset }}
        build-type: ${{ matrix.build_type }}
        cmake-args: ${{ matrix.cmake_args }}

    - name: Build
      if: success()
      uses: DiligentGraphics/github-action/build@v1



  #########  Linux builds  #########
  linux-build:
    needs: linux-precheks
    runs-on: ubuntu-latest

    strategy:
      matrix:
        name:       ["GCC", "Clang"]
        build_type: ["Debug", "Release"]
        # Do not build GLSLang and friends to save time as it is built by Core and Engine CI.
        cmake_args: ["-DDILIGENT_NO_GLSLANG=ON -DDILIGENT_NO_HLSL=ON"]
        include:
          - name:            "GCC"
            cmake_generator: "Unix Makefiles"
            cc:              "gcc-9"
            cxx:             "g++-9"

          - name:            "Clang"
            cmake_generator: "Ninja"
            cc:              "clang-12"
            cxx:             "clang++-12"

    name: Linux -> ${{ matrix.name }}-x64, ${{ matrix.build_type }}

    steps:
    - name: Checkout
      uses: DiligentGraphics/github-action/checkout@v1

    - name: Set up build environment
      if:   success()
      uses: DiligentGraphics/github-action/setup-build-env@v1
      with:
        platform:        Linux
        cmake-generator: ${{ matrix.cmake_generator }}

    - name: Configure CMake
      if:   success()
      uses: DiligentGraphics/github-action/configure-cmake@v1
      with:
        cc:         ${{ matrix.cc }}
        cxx:        ${{ matrix.cxx }}
        generator:  ${{ matrix.cmake_generator }}
        build-type: ${{ matrix.build_type }}
        cmake-args: ${{ matrix.cmake_args }}

    - name: Build
      if: success()
      uses: DiligentGraphics/github-action/build@v1



  #########  MacOS/iOS/tvOS builds  #########
  macos-build:
    needs: macos-precheks
    runs-on: macos-latest

    strategy:
      matrix:
        platform:   ["MacOS", "iOS", "tvOS"]
        build_type: ["Debug", "Release"]
        # Do not build GLSLang and friends to save time as it is built by Core and Engine CI.
        cmake_args: ["-DDILIGENT_NO_GLSLANG=ON -DDILIGENT_NO_HLSL=ON"]
        exclude:
          # Exclude tvOS-Release
          - platform:   "tvOS"
            build_type: "Release"

    name: MacOS -> ${{ matrix.platform }}-${{ matrix.build_type }}

    steps:
    - name: Checkout
      uses: DiligentGraphics/github-action/checkout@v1

    - name: Set up build environment
      if:   success()
      uses: DiligentGraphics/github-action/setup-build-env@v1
      with:
        platform: ${{ matrix.platform }}

    - name: Configure CMake
      if:   success()
      uses: DiligentGraphics/github-action/configure-cmake@v1
      with:
        build-type: ${{ matrix.build_type }}
        cmake-args: ${{ matrix.cmake_args }}

    - name: Build
      if:   success()
      uses: DiligentGraphics/github-action/build@v1



  #########  Emscripten  #########
  emscripten-build:
    needs: linux-precheks

    strategy:
      matrix:
        os:         ["windows-latest", "ubuntu-latest", "macos-latest"]
        build_type: ["Debug", "Release"]

        exclude:
          # Exclude MacOS-Release
          - os:         "macos-latest"
            build_type: "Release"

        include:
          - os:        "windows-latest"
            host_name: "Win10"

          - os:        "ubuntu-latest"
            host_name: "Linux"

          - os:        "macos-latest"
            host_name: "MacOS"

    runs-on: ${{ matrix.os }}
    name: ${{ matrix.host_name }} -> Emscripten, ${{ matrix.build_type }}

    steps:
    - name: Checkout
      uses: DiligentGraphics/github-action/checkout@v1

    - name: Set up build environment
      if:   success()
      uses: DiligentGraphics/github-action/setup-build-env@v1
      with:
        platform: Emscripten

    - name: Configure CMake
      if:   success()
      uses: DiligentGraphics/github-action/configure-cmake@v1
      with:
        build-type: ${{ matrix.build_type }}

    - name: Build
      if:   success()
      uses: DiligentGraphics/github-action/build@v1
