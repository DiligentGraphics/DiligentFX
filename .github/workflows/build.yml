name: Build

on: [push, pull_request]

jobs:
  #########  Pre-checks  #########
  win-precheks:
    runs-on: windows-latest
    name: Win10 -> Pre-checks

    steps:
    - name: Clone DiligentCore
      uses: actions/checkout@v2
      with:
        repository: 'DiligentGraphics/DiligentCore'
        path:       DiligentCore

    - name: Clone DiligentFX
      uses: actions/checkout@v2
      with:
        path: DiligentFX

    - name: Format validation
      shell: cmd
      run: |
        cd DiligentFX/BuildTools/FormatValidation
        validate_format_win.bat

  linux-precheks:
    runs-on: ubuntu-latest
    name: Linux -> Pre-checks

    steps:
    - name: Clone DiligentCore
      uses: actions/checkout@v2
      with:
        repository: 'DiligentGraphics/DiligentCore'
        path:       DiligentCore

    - name: Clone DiligentFX
      uses: actions/checkout@v2
      with:
        path: DiligentFX

    - name: Format validation
      shell: bash
      run: |
        cd $GITHUB_WORKSPACE/DiligentFX/BuildTools/FormatValidation
        ./validate_format_linux.sh

    - name: Codespell
      uses: codespell-project/actions-codespell@master
      with:
        check_filenames: true
        ignore_words_list: inout,lod
        skip: ./DiligentFX/ThirdParty
        path: ./DiligentFX

  macos-precheks:
    runs-on: macos-latest
    name: MacOS -> Pre-Checks

    steps:
    - name: Clone DiligentCore
      uses: actions/checkout@v2
      with:
        repository: 'DiligentGraphics/DiligentCore'
        path:       DiligentCore

    - name: Clone DiligentFX
      uses: actions/checkout@v2
      with:
        path: DiligentFX

    - name: Format validation
      shell: bash
      run: |
        cd $GITHUB_WORKSPACE/DiligentFX/BuildTools/FormatValidation
        ./validate_format_mac.sh



  #########  Windows/UWP builds  #########
  win-build:
    needs: win-precheks
    runs-on: windows-2022

    strategy:
      matrix:
        name: ["Win10"]
        toolset: [Win32, x64]
        build_type: [Debug, Release]
        cmake_generator: ["Visual Studio 17 2022"]
        cmake_args: [""]
        platform: ["Win32"]

        include:
          - name: "Win10-Dev"
            platform: "Win32"
            toolset: x64
            build_type: RelWithDebInfo
            cmake_generator: "Visual Studio 17 2022"
            cmake_args: "-DDILIGENT_DEVELOPMENT=ON"

          - name: "Win8.1"
            platform: "Win32"
            toolset: x64
            build_type: Release
            cmake_generator: "Visual Studio 17 2022"
            cmake_args: "-DCMAKE_SYSTEM_VERSION=8.1"

          - name: "Win10-Ninja"
            platform: "Win32"
            toolset: x64
            build_type: Debug
            cmake_generator: "Ninja"
            cmake_args: ""

          - name: "UWP"
            platform: "UWP"
            toolset: x64
            build_type: Debug
            cmake_generator: "Visual Studio 17 2022"
            cmake_args: "-DCMAKE_SYSTEM_NAME=WindowsStore -DCMAKE_SYSTEM_VERSION=10.0"

          - name: "UWP"
            platform: "UWP"
            toolset: x64
            build_type: Release
            cmake_generator: "Visual Studio 17 2022"
            cmake_args: "-DCMAKE_SYSTEM_NAME=WindowsStore -DCMAKE_SYSTEM_VERSION=10.0"

    name: Win10 -> ${{ matrix.name }}-${{ matrix.toolset }}, ${{ matrix.build_type }}

    steps:
    - name: Checkout
      uses: DiligentGraphics/github-action/checkout@master

    - name: Set up build environment
      if: success()
      uses: DiligentGraphics/github-action/setup-build-env@v1
      with:
        platform:      ${{ matrix.platform }}
        setup-ninja:   ${{ matrix.cmake_generator == 'Ninja' }}
        ninja-vs-arch: ${{ matrix.toolset }}

    - name: Configure CMake
      if: success()
      uses: DiligentGraphics/github-action/configure-cmake@v1
      with:
        generator:  ${{ matrix.cmake_generator }}
        vs-arch:    ${{ matrix.toolset }}
        build-type: ${{ matrix.build_type }}
        cmake-args: ${{ matrix.cmake_args }}

    - name: Build
      if: success()
      uses: DiligentGraphics/github-action/build@master



  #########  Linux builds  #########
  linux-build:
    needs: linux-precheks
    runs-on: ubuntu-latest

    strategy:
      matrix:
        name: ["GCC", "Clang"]
        build_type: ["Debug", "Release"]
        cmake_args: [""]
        include:
          - name: "GCC"
            cmake_generator: "Unix Makefiles"
            cc: gcc-9
            cxx: g++-9

          - name: "Clang"
            cmake_generator: "Ninja"
            cc: clang-12
            cxx: clang++-12

    name: Linux -> ${{ matrix.name }}-x64, ${{ matrix.build_type }}

    steps:
    - name: Checkout
      uses: DiligentGraphics/github-action/checkout@master

    - name: Set up build environment
      if: success()
      uses: DiligentGraphics/github-action/setup-build-env@v1
      with:
        platform:    Linux
        setup-ninja: ${{ matrix.cmake_generator == 'Ninja' }}

    - name: Configure CMake
      if: success()
      uses: DiligentGraphics/github-action/configure-cmake@v1
      with:
        cc:         ${{ matrix.cc }}
        cxx:        ${{ matrix.cxx }}
        generator:  ${{ matrix.cmake_generator }}
        build-type: ${{ matrix.build_type }}
        cmake-args: ${{ matrix.cmake_args }}

    - name: Build
      if: success()
      uses: DiligentGraphics/github-action/build@master



  #########  MacOS/iOS/tvOS builds  #########
  macos-build:
    needs: macos-precheks
    runs-on: macos-latest

    strategy:
      matrix:
        platform: [MacOS, iOS, tvOS]
        build_type: [Debug, Release]
        exclude:
          # Exclude tvOS-Release
          - platform: tvOS
            build_type: Release
        include:
          - platform: "MacOS"
            build_type: "Debug"
            cmake_args: ""
          - platform: "MacOS"
            build_type: "Release"
            cmake_args: ""
          - platform: "iOS"
            cmake_args: ""
          - platform: "tvOS"
            cmake_args: ""

    name: MacOS -> ${{ matrix.platform }}-${{ matrix.build_type }}

    steps:
    - name: Checkout
      uses: DiligentGraphics/github-action/checkout@master

    - name: Set up build environment
      if: success()
      uses: DiligentGraphics/github-action/setup-build-env@v1
      with:
        platform: ${{ matrix.platform }}

    - name: Configure CMake
      if: success()
      uses: DiligentGraphics/github-action/configure-cmake@v1
      with:
        build-type: ${{ matrix.build_type }}
        cmake-args: ${{ matrix.cmake_args }}

    - name: Build
      if: success()
      uses: DiligentGraphics/github-action/build@master



  #########  Emscripten  #########
  emscripten-build:
    needs: linux-precheks

    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        build_type: [Debug, Release]
        exclude:
          # Exclude MacOS-Release
          - os: macos-latest
            build_type: Release
        include:
          - os: windows-latest
            host_name: Win10
          - os: ubuntu-latest
            host_name: Linux
          - os: macos-latest
            host_name: MacOS

    runs-on: ${{ matrix.os }}
    name: ${{ matrix.host_name }} -> Emscripten, ${{ matrix.build_type }}

    steps:
    - name: Checkout
      uses: DiligentGraphics/github-action/checkout@master

    - name: Set up build environment
      if: success()
      uses: DiligentGraphics/github-action/setup-build-env@v1
      with:
        platform: Emscripten

    - name: Configure CMake
      if: success()
      uses: DiligentGraphics/github-action/configure-cmake@v1
      with:
        build-type: ${{ matrix.build_type }}
        cmake-args: "-DDILIGENT_BUILD_FX_INCLUDE_TEST=ON"

    - name: Build
      if: success()
      uses: DiligentGraphics/github-action/build@master
