// PBR shader based on the Khronos WebGL PBR implementation
// See https://github.com/KhronosGroup/glTF-WebGL-PBR
// Supports both metallic roughness and specular glossiness inputs

#include "BasicStructures.fxh"
#include "GLTF_PBR_Shading.fxh"
#include "ToneMapping.fxh"

#ifndef ALLOW_DEBUG_VIEW
#   define ALLOW_DEBUG_VIEW 0
#endif

cbuffer cbCameraAttribs
{
    CameraAttribs g_CameraAttribs;
}

cbuffer cbLightAttribs
{
    LightAttribs g_LightAttribs;
}

cbuffer cbMaterialInfo
{
    GLTFMaterialShaderInfo g_MaterialInfo;
}

cbuffer cbRenderParameters
{
    GLTFRendererShaderParameters g_RenderParameters;
}


#if GLTF_PBR_USE_IBL
TextureCube  g_IrradianceMap;
SamplerState g_IrradianceMap_sampler;

TextureCube  g_PrefilteredEnvMap;
SamplerState g_PrefilteredEnvMap_sampler;

Texture2D     g_BRDF_LUT;
SamplerState  g_BRDF_LUT_sampler;
#endif

Texture2D    g_ColorMap;
SamplerState g_ColorMap_sampler;

Texture2D    g_PhysicalDescriptorMap;
SamplerState g_PhysicalDescriptorMap_sampler;

Texture2D    g_NormalMap;
SamplerState g_NormalMap_sampler;

Texture2D    g_AOMap;
SamplerState g_AOMap_sampler;

Texture2D    g_EmissiveMap;
SamplerState g_EmissiveMap_sampler;


void main(in  float4 ClipPos  : SV_Position,
          in  float3 WorldPos : WORLD_POS,
          in  float3 Normal   : NORMAL,
          in  float2 UV0      : UV0,
          in  float2 UV1      : UV1,
          out float4 OutColor : SV_Target)
{
    float4 BaseColor = g_ColorMap.Sample(g_ColorMap_sampler, lerp(UV0, UV1, g_MaterialInfo.BaseColorTextureUVSelector));
    BaseColor = SRGBtoLINEAR(BaseColor) * g_MaterialInfo.BaseColorFactor;
    //BaseColor *= getVertexColor();

	if (g_MaterialInfo.UseAlphaMask != 0 && BaseColor.a < g_MaterialInfo.AlphaMaskCutoff)
    {
		discard;
	}
    
    float2 NormalMapUV  = lerp(UV0, UV1, g_MaterialInfo.NormalTextureUVSelector);
    float3 TSNormal     = g_NormalMap            .Sample(g_NormalMap_sampler,             NormalMapUV).rgb;
    float  Occlusion    = g_AOMap                .Sample(g_AOMap_sampler,                 lerp(UV0, UV1, g_MaterialInfo.OcclusionTextureUVSelector)).r;
    float3 Emissive     = g_EmissiveMap          .Sample(g_EmissiveMap_sampler,           lerp(UV0, UV1, g_MaterialInfo.EmissiveTextureUVSelector)).rgb;
    float4 PhysicalDesc = g_PhysicalDescriptorMap.Sample(g_PhysicalDescriptorMap_sampler, lerp(UV0, UV1, g_MaterialInfo.PhysicalDescriptorTextureUVSelector));
    
    float metallic;
    SurfaceReflectanceInfo SrfInfo = GLTF_PBR_GetSurfaceReflectance(g_MaterialInfo, BaseColor, PhysicalDesc, metallic);

    // LIGHTING

    float3 perturbedNormal = GLTF_PBR_PerturbNormal(WorldPos, Normal, TSNormal, NormalMapUV, g_MaterialInfo.NormalTextureUVSelector >= 0.0);
    float3 view            = normalize(g_CameraAttribs.f4Position.xyz - WorldPos.xyz); // Direction from surface point to camera

    float3 color = float3(0.0, 0.0, 0.0);
    color += GLTF_PBR_ApplyDirectionalLight(g_LightAttribs.f4Direction.xyz, g_LightAttribs.f4Intensity.rgb, SrfInfo, perturbedNormal, view);
    
//#ifdef USE_PUNCTUAL
//    for (int i = 0; i < LIGHT_COUNT; ++i)
//    {
//        Light light = u_Lights[i];
//        if (light.type == LightType_Directional)
//        {
//            color += applyDirectionalLight(light, materialInfo, normal, view);
//        }
//        else if (light.type == LightType_Point)
//        {
//            color += applyPointLight(light, materialInfo, normal, view);
//        }
//        else if (light.type == LightType_Spot)
//        {
//            color += applySpotLight(light, materialInfo, normal, view);
//        }
//    }
//#endif
//
    

    // Calculate lighting contribution from image based lighting source (IBL)
    GLTF_PBR_IBL_Contribution IBLContrib;
    IBLContrib.f3Diffuse  = float3(0.0, 0.0, 0.0);
    IBLContrib.f3Specular = float3(0.0, 0.0, 0.0);
#if GLTF_PBR_USE_IBL
    IBLContrib =
        GLTF_PBR_GetIBLContribution(SrfInfo, perturbedNormal, view, float(g_RenderParameters.PrefilteredCubeMipLevels),
                           g_BRDF_LUT,          g_BRDF_LUT_sampler, 
                           g_IrradianceMap,     g_IrradianceMap_sampler,
                           g_PrefilteredEnvMap, g_PrefilteredEnvMap_sampler);
    color += (IBLContrib.f3Diffuse + IBLContrib.f3Specular) * g_RenderParameters.IBLScale;
#endif


    color = lerp(color, color * Occlusion, g_RenderParameters.OcclusionStrength);

    const float u_EmissiveFactor = 1.0;
    Emissive = SRGBtoLINEAR(Emissive);
    color += Emissive.rgb * g_MaterialInfo.EmissiveFactor.rgb * g_RenderParameters.EmissionScale;

    ToneMappingAttribs TMAttribs;
    TMAttribs.iToneMappingMode     = TONE_MAPPING_MODE_UNCHARTED2;
    TMAttribs.bAutoExposure        = false;
    TMAttribs.fMiddleGray          = g_RenderParameters.MiddleGray;
    TMAttribs.bLightAdaptation     = false;
    TMAttribs.fWhitePoint          = g_RenderParameters.WhitePoint;
    TMAttribs.fLuminanceSaturation = 1.0;
    color = ToneMap(color, TMAttribs, g_RenderParameters.AverageLogLum);
    OutColor = float4(color, BaseColor.a);

#if ALLOW_DEBUG_VIEW
	// Shader inputs debug visualization
	if (g_RenderParameters.DebugViewType != 0)
    {
 		switch (g_RenderParameters.DebugViewType)
        {
			case  1: OutColor.rgba = BaseColor;                                                         break;
            case  2: OutColor.rgba = float4(BaseColor.a, BaseColor.a, BaseColor.a, 1.0);                break;
            // Apply extra srgb->linear transform to make the maps look better
			case  3: OutColor.rgb  = SRGBtoLINEAR(TSNormal.xyz);                                        break;
			case  4: OutColor.rgb  = SRGBtoLINEAR(Occlusion * float3(1.0, 1.0, 1.0));                   break;
			case  5: OutColor.rgb  = SRGBtoLINEAR(Emissive.rgb);                                        break;
			case  6: OutColor.rgb  = SRGBtoLINEAR(metallic * float3(1.0, 1.0, 1.0) );                   break;
			case  7: OutColor.rgb  = SRGBtoLINEAR(SrfInfo.PerceptualRoughness * float3(1.0, 1.0, 1.0)); break;
            case  8: OutColor.rgb  = SrfInfo.DiffuseColor;                                              break;
            case  9: OutColor.rgb  = SrfInfo.Reflectance0;                                              break;
            case 10: OutColor.rgb  = SrfInfo.Reflectance90;                                             break;
            case 11: OutColor.rgb  = SRGBtoLINEAR(abs(Normal / max(length(Normal), 1e-3)));             break;
            case 12: OutColor.rgb  = SRGBtoLINEAR(abs(perturbedNormal));                                break;
            case 13: OutColor.rgb  = dot(perturbedNormal, view) * float3(1.0, 1.0, 1.0);                break;
#if GLTF_PBR_USE_IBL
            case 14: OutColor.rgb  = IBLContrib.f3Diffuse;                                                break;
            case 15: OutColor.rgb  = IBLContrib.f3Specular;                                               break;
#endif
		}
	}
#endif

}
