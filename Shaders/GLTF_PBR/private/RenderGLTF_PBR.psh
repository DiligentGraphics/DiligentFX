// PBR shader based on the Khronos WebGL PBR implementation
// See https://github.com/KhronosGroup/glTF-WebGL-PBR
// Supports both metallic roughness and specular glossiness inputs

#include "BasicStructures.fxh"
#include "GLTF_PBR_Structures.fxh"
#include "GLTF_PBR_Common.fxh"

cbuffer cbCameraAttribs
{
    CameraAttribs g_CameraAttribs;
}

cbuffer cbLightAttribs
{
    LightAttribs g_LightAttribs;
}

cbuffer cbMaterialInfo
{
    GLTFMaterialInfo g_MaterialInfo;
}

cbuffer cbRenderParameters
{
    GLTFRenderParameters g_RenderParameters;
}


TextureCube  g_IrradianceMap;
SamplerState g_IrradianceMap_sampler;

TextureCube  g_PrefilteredMap;
SamplerState g_PrefilteredMap_sampler;

Texture2D     g_BRDF_LUT;
SamplerState  g_BRDF_LUT_sampler;


Texture2D    g_ColorMap;
SamplerState g_ColorMap_sampler;

Texture2D    g_PhysicalDescriptorMap;
SamplerState g_PhysicalDescriptorMap_sampler;

Texture2D    g_NormalMap;
SamplerState g_NormalMap_sampler;

Texture2D    g_AOMap;
SamplerState g_AOMap_sampler;

Texture2D    g_EmissiveMap;
SamplerState g_EmissiveMap_sampler;


// Encapsulate the various inputs used by the various functions in the shading equation
// We store values in this struct to simplify the integration of alternative implementations
// of the shading terms, outlined in the Readme.MD Appendix.
struct PBRInfo
{
	float  NdotL;                 // cos angle between normal and light direction
	float  NdotV;                 // cos angle between normal and view direction
	float  NdotH;                 // cos angle between normal and half floattor
	float  LdotH;                 // cos angle between light direction and half floattor
	float  VdotH;                 // cos angle between view direction and half floattor
	float  perceptualRoughness;   // roughness value, as authored by the model creator (input to shader)
	float  metalness;             // metallic value at the surface
	float3 reflectance0;          // full reflectance color (normal incidence angle)
	float3 reflectance90;         // reflectance color at grazing angle
	float  alphaRoughness;        // roughness mapped to a more linear change in the roughness (proposed by [2])
	float3 diffuseColor;          // color contribution from diffuse lighting
	float3 specularColor;         // color contribution from specular lighting
};

#define  M_PI           3.141592653589793
#define  MIN_ROUGHNESS  0.04

#define  MANUAL_SRGB             1
#define  SRGB_FAST_APPROXIMATION 1

float3 Uncharted2Tonemap(float3 color)
{
	float A = 0.15;
	float B = 0.50;
	float C = 0.10;
	float D = 0.20;
	float E = 0.02;
	float F = 0.30;
	float W = 11.2;
	return ((color*(A*color+C*B)+D*E)/(color*(A*color+B)+D*F))-E/F;
}

//float4 tonemap(float4 color)
//{
//	float3 outcol = Uncharted2Tonemap(color.rgb * uboParams.exposure);
//	outcol = outcol * (1.0f / Uncharted2Tonemap(float3(11.2f)));	
//	return float4(pow(outcol, float3(1.0f / uboParams.gamma)), color.a);
//}

float4 SRGBtoLINEAR(float4 srgbIn)
{
#ifdef MANUAL_SRGB
#   ifdef SRGB_FAST_APPROXIMATION
	    float3 linOut = pow(srgbIn.xyz, float3(2.2, 2.2, 2.2));
#   else
	    float3 bLess  = step(float3(0.04045, 0.04045, 0.04045), srgbIn.xyz);
	    float3 linOut = mix( srgbIn.xyz/12.92, pow((srgbIn.xyz + float3(0.055, 0.055, 0.055)) / 1.055, float3(2.4, 2.4, 2.4)), bLess );
#   endif
	    return float4(linOut, srgbIn.w);
#else
	return srgbIn;
#endif
}

#if 0
float3 TransformNormal(float3  TangentNormal,
                       float3  WorldPos,
                       float3  Normal,
                       float2  UV)
{
	// Perturb normal, see http://www.thetenthplanet.de/archives/1180
	float3 dPos_dx = ddx(WorldPos);
	float3 dPos_dy = ddy(WorldPos);
	float2 dUV_dx  = ddx(UV);
	float2 dUV_dy  = ddy(UV);

	float3 N = normalize(Normal);
	float3 T = normalize(dPos_dx * dUV_dy.y - dPos_dy * dUV_dx.y);
	float3 B = -normalize(cross(N, T));
	float3x3 TBN = float3x3(T, B, N);

	return normalize(TBN * TangentNormal);
}
#endif

/*
// Calculation of the lighting contribution from an optional Image Based Light source.
// Precomputed Environment Maps are required uniform inputs and are computed as outlined in [1].
// See our README.md on Environment Maps [3] for additional discussion.
float3 getIBLContribution(PBRInfo pbrInputs, float3 n, float3 reflection)
{
	float lod = (pbrInputs.perceptualRoughness * uboParams.prefilteredCubeMipLevels);
	// retrieve a scale and bias to F0. See [1], Figure 3
	float3 brdf = (texture(samplerBRDFLUT, float2(pbrInputs.NdotV, 1.0 - pbrInputs.perceptualRoughness))).rgb;
	float3 diffuseLight = SRGBtoLINEAR(tonemap(texture(samplerIrradiance, n))).rgb;

	float3 specularLight = SRGBtoLINEAR(tonemap(textureLod(prefilteredMap, reflection, lod))).rgb;

	float3 diffuse = diffuseLight * pbrInputs.diffuseColor;
	float3 specular = specularLight * (pbrInputs.specularColor * brdf.x + brdf.y);

	// For presentation, this allows us to disable IBL terms
	// For presentation, this allows us to disable IBL terms
	diffuse *= uboParams.scaleIBLAmbient;
	specular *= uboParams.scaleIBLAmbient;

	return diffuse + specular;
}
*/

// Basic Lambertian diffuse
// Implementation from Lambert's Photometria https://archive.org/details/lambertsphotome00lambgoog
// See also [1], Equation 1
float3 Diffuse(PBRInfo pbrInputs)
{
	return pbrInputs.diffuseColor / M_PI;
}

// The following equation models the Fresnel reflectance term of the spec equation (aka F())
// Implementation of fresnel from [4], Equation 15
float3 SpecularReflection(PBRInfo pbrInputs)
{
	return pbrInputs.reflectance0 + (pbrInputs.reflectance90 - pbrInputs.reflectance0) * pow(clamp(1.0 - pbrInputs.VdotH, 0.0, 1.0), 5.0);
}

// This calculates the specular geometric attenuation (aka G()),
// where rougher material will reflect less light back to the viewer.
// This implementation is based on [1] Equation 4, and we adopt their modifications to
// alphaRoughness as input as originally proposed in [2].
float GeometricOcclusion(PBRInfo pbrInputs)
{
	float NdotL = pbrInputs.NdotL;
	float NdotV = pbrInputs.NdotV;
	float r = pbrInputs.alphaRoughness;

	float attenuationL = 2.0 * NdotL / (NdotL + sqrt(r * r + (1.0 - r * r) * (NdotL * NdotL)));
	float attenuationV = 2.0 * NdotV / (NdotV + sqrt(r * r + (1.0 - r * r) * (NdotV * NdotV)));
	return attenuationL * attenuationV;
}

// The following equation(s) model the distribution of microfacet normals across the area being drawn (aka D())
// Implementation from "Average Irregularity Representation of a Roughened Surface for Ray Reflection" by T. S. Trowbridge, and K. P. Reitz
// Follows the distribution function recommended in the SIGGRAPH 2013 course notes from EPIC Games [1], Equation 3.
float MicrofacetDistribution(PBRInfo pbrInputs)
{
	float roughnessSq = pbrInputs.alphaRoughness * pbrInputs.alphaRoughness;
	float f = (pbrInputs.NdotH * roughnessSq - pbrInputs.NdotH) * pbrInputs.NdotH + 1.0;
	return roughnessSq / (M_PI * f * f);
}

// Gets metallic factor from specular glossiness workflow inputs 
float ConvertMetallic(float3 diffuse, float3 specular, float maxSpecular)
{
	float perceivedDiffuse = sqrt(0.299 * diffuse.r * diffuse.r + 0.587 * diffuse.g * diffuse.g + 0.114 * diffuse.b * diffuse.b);
	float perceivedSpecular = sqrt(0.299 * specular.r * specular.r + 0.587 * specular.g * specular.g + 0.114 * specular.b * specular.b);
	if (perceivedSpecular < MIN_ROUGHNESS)
    {
		return 0.0;
	}
	float a = MIN_ROUGHNESS;
	float b = perceivedDiffuse * (1.0 - maxSpecular) / (1.0 - MIN_ROUGHNESS) + perceivedSpecular - 2.0 * MIN_ROUGHNESS;
	float c = MIN_ROUGHNESS - perceivedSpecular;
	float D = max(b * b - 4.0 * a * c, 0.0);
	return clamp((-b + sqrt(D)) / (2.0 * a), 0.0, 1.0);
}



void main(in  GLTF_VS_Output VSOut, 
          out float4         Color : SV_Target)
{
#if 0
	float perceptualRoughness;
	float metallic;
	float3 diffuseColor;
	float4 baseColor;

	float3 f0 = float3(0.04);

	if (material.UseAlphaMask != 0)
    {
		if (material.baseColorTextureSet > -1)
        {
			baseColor = SRGBtoLINEAR(texture(colorMap, material.baseColorTextureSet == 0 ? VSOut.UV0 : VSOut.UV1)) * material.baseColorFactor;
		}
        else
        {
			baseColor = material.baseColorFactor;
		}
		if (baseColor.a < material.alphaMaskCutoff)
        {
			discard;
		}
	}

	if (material.workflow == PBR_WORKFLOW_METALLIC_ROUGHNESS)
    {
		// Metallic and Roughness material properties are packed together
		// In glTF, these factors can be specified by fixed scalar values
		// or from a metallic-roughness map
		perceptualRoughness = material.roughnessFactor;
		metallic = material.metallicFactor;
		if (material.physicalDescriptorTextureSet > -1)
        {
			// Roughness is stored in the 'g' channel, metallic is stored in the 'b' channel.
			// This layout intentionally reserves the 'r' channel for (optional) occlusion map data
			float4 mrSample = texture(physicalDescriptorMap, material.physicalDescriptorTextureSet == 0 ? VSOut.UV0 : VSOut.UV1);
			perceptualRoughness = mrSample.g * perceptualRoughness;
			metallic = mrSample.b * metallic;
		} else
        {
			perceptualRoughness = clamp(perceptualRoughness, MIN_ROUGHNESS, 1.0);
			metallic = clamp(metallic, 0.0, 1.0);
		}
		// Roughness is authored as perceptual roughness; as is convention,
		// convert to material roughness by squaring the perceptual roughness [2].

		// The albedo may be defined from a base texture or a flat color
		if (material.baseColorTextureSet > -1)
        {
			baseColor = SRGBtoLINEAR(texture(colorMap, material.baseColorTextureSet == 0 ? VSOut.UV0 : VSOut.UV1)) * material.baseColorFactor;
		} else
        {
			baseColor = material.baseColorFactor;
		}
	}

	if (material.workflow == PBR_WORKFLOW_SPECULAR_GLOSINESS)
    {
		// Values from specular glossiness workflow are converted to metallic roughness
		if (material.physicalDescriptorTextureSet > -1)
        {
			perceptualRoughness = 1.0 - texture(physicalDescriptorMap, material.physicalDescriptorTextureSet == 0 ? VSOut.UV0 : VSOut.UV1).a;
		} else
        {
			perceptualRoughness = 0.0;
		}

		const float epsilon = 1e-6;

		float4 diffuse = SRGBtoLINEAR(texture(colorMap, VSOut.UV0));
		float3 specular = SRGBtoLINEAR(texture(physicalDescriptorMap, VSOut.UV0)).rgb;

		float maxSpecular = max(max(specular.r, specular.g), specular.b);

		// Convert metallic value from specular glossiness inputs
		metallic = convertMetallic(diffuse.rgb, specular, maxSpecular);

		float3 baseColorDiffusePart = diffuse.rgb * ((1.0 - maxSpecular) / (1 - MIN_ROUGHNESS) / max(1 - metallic, epsilon)) * material.diffuseFactor.rgb;
		float3 baseColorSpecularPart = specular - (float3(MIN_ROUGHNESS) * (1 - metallic) * (1 / max(metallic, epsilon))) * material.specularFactor.rgb;
		baseColor = float4(mix(baseColorDiffusePart, baseColorSpecularPart, metallic * metallic), diffuse.a);

	}

	diffuseColor = baseColor.rgb * (float3(1.0) - f0);
	diffuseColor *= 1.0 - metallic;
		
	float alphaRoughness = perceptualRoughness * perceptualRoughness;

	float3 specularColor = mix(f0, baseColor.rgb, metallic);

	// Compute reflectance.
	float reflectance = max(max(specularColor.r, specularColor.g), specularColor.b);

	// For typical incident reflectance range (between 4% to 100%) set the grazing reflectance to 100% for typical fresnel effect.
	// For very low reflectance range on highly diffuse objects (below 4%), incrementally reduce grazing reflecance to 0%.
	float reflectance90 = clamp(reflectance * 25.0, 0.0, 1.0);
	float3 specularEnvironmentR0 = specularColor.rgb;
	float3 specularEnvironmentR90 = float3(1.0, 1.0, 1.0) * reflectance90;

    float3 TangentNormal = NormalMap.Sample(NormalMap_sampler, material.normalTextureSet == 0 ? VSOut.UV0 : VSOut.UV1).xyz * 2.0 - 1.0;
	float3 n = (material.normalTextureSet > -1) ? getNormal() : normalize(inNormal);
	float3 v = normalize(ubo.camPos - inWorldPos);    // floattor from surface point to camera
	float3 l = normalize(uboParams.lightDir.xyz);     // floattor from surface point to light
	float3 h = normalize(l+v);                        // Half floattor between both l and v
	float3 reflection = -normalize(reflect(v, n));
	reflection.y *= -1.0f;

	float NdotL = clamp(dot(n, l), 0.001, 1.0);
	float NdotV = clamp(abs(dot(n, v)), 0.001, 1.0);
	float NdotH = clamp(dot(n, h), 0.0, 1.0);
	float LdotH = clamp(dot(l, h), 0.0, 1.0);
	float VdotH = clamp(dot(v, h), 0.0, 1.0);

	PBRInfo pbrInputs = PBRInfo(
		NdotL,
		NdotV,
		NdotH,
		LdotH,
		VdotH,
		perceptualRoughness,
		metallic,
		specularEnvironmentR0,
		specularEnvironmentR90,
		alphaRoughness,
		diffuseColor,
		specularColor
	);

	// Calculate the shading terms for the microfacet specular shading model
	float3 F = SpecularReflection(pbrInputs);
	float  G = GeometricOcclusion(pbrInputs);
	float  D = MicrofacetDistribution(pbrInputs);

	const float3 u_LightColor = float3(1.0);

	// Calculation of analytical lighting contribution
	float3 diffuseContrib = (1.0 - F) * diffuse(pbrInputs);
	float3 specContrib = F * G * D / (4.0 * NdotL * NdotV);
	// Obtain final intensity as reflectance (BRDF) scaled by the energy of the light (cosine law)
	float3 color = NdotL * u_LightColor * (diffuseContrib + specContrib);

	// Calculate lighting contribution from image based lighting source (IBL)
	color += GetIBLContribution(pbrInputs, n, reflection);

	const float u_OcclusionStrength = 1.0f;
	// Apply optional PBR terms for additional (optional) shading
	if (material.occlusionTextureSet > -1)
    {
		float ao = texture(aoMap, (material.occlusionTextureSet == 0 ? VSOut.UV0 : VSOut.UV1)).r;
		color = mix(color, color * ao, u_OcclusionStrength);
	}

	const float u_EmissiveFactor = 1.0f;
	if (material.emissiveTextureSet > -1)
    {
		float3 emissive = SRGBtoLINEAR(texture(emissiveMap, material.emissiveTextureSet == 0 ? VSOut.UV0 : VSOut.UV1)).rgb * u_EmissiveFactor;
		color += emissive;
	}
	
	outColor = float4(color, baseColor.a);
#endif


    Color = float4(1.0, 1.0, 1.0, 1.0);

	// Shader inputs debug visualization
	if (g_RenderParameters.DebugViewType != 0)
    {
		switch (g_RenderParameters.DebugViewType)
        {
			case 1:
				Color.rgba = g_MaterialInfo.BaseColorTextureSet > -1 ? g_ColorMap.Sample(g_ColorMap_sampler, g_MaterialInfo.BaseColorTextureSet == 0 ? VSOut.UV0 : VSOut.UV1) : float4(1.0, 1.0, 1.0, 1.0);
				break;
			case 2:
				Color.rgb = (g_MaterialInfo.NormalTextureSet > -1) ? g_NormalMap.Sample(g_NormalMap_sampler, g_MaterialInfo.NormalTextureSet == 0 ? VSOut.UV0 : VSOut.UV1).rgb : normalize(VSOut.Normal);
				break;
			case 3:
				Color.rgb = (g_MaterialInfo.OcclusionTextureSet > -1) ? g_AOMap.Sample(g_AOMap_sampler, g_MaterialInfo.OcclusionTextureSet == 0 ? VSOut.UV0 : VSOut.UV1).rrr : float3(0.0, 0.0, 0.0);
				break;
			case 4:
				Color.rgb = (g_MaterialInfo.EmissiveTextureSet > -1) ? g_EmissiveMap.Sample(g_EmissiveMap_sampler, g_MaterialInfo.EmissiveTextureSet == 0 ? VSOut.UV0 : VSOut.UV1).rgb : float3(0.0, 0.0, 0.0);
				break;
			case 5:
				Color.rgb = g_PhysicalDescriptorMap.Sample(g_PhysicalDescriptorMap_sampler, VSOut.UV0).bbb;
				break;
			case 6:
				Color.rgb = g_PhysicalDescriptorMap.Sample(g_PhysicalDescriptorMap_sampler, VSOut.UV0).ggg;
				break;
		}
		Color = SRGBtoLINEAR(Color);
	}

#if 0
	// PBR equation debug visualization
	// "none", "Diff (l,n)", "F (l,h)", "G (l,v,h)", "D (h)", "Specular"
	if (uboParams.debugViewEquation > 0.0)
    {
		int index = int(uboParams.debugViewEquation);
		switch (index)
        {
			case 1:
				outColor.rgb = diffuseContrib;
				break;
			case 2:
				outColor.rgb = F;
				break;
			case 3:
				outColor.rgb = float3(G);
				break;
			case 4: 
				outColor.rgb = float3(D);
				break;
			case 5:
				outColor.rgb = specContrib;
				break;				
		}
	}
#endif

}
