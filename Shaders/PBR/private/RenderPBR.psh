// PBR shader based on the Khronos WebGL PBR implementation
// See https://github.com/KhronosGroup/glTF-WebGL-PBR
// Supports both metallic roughness and specular glossiness inputs

#include "BasicStructures.fxh"
#include "PBR_Shading.fxh"
#include "ToneMapping.fxh"

#include "VSOutputStruct.generated"
// struct VSOutput
// {
//     float4 ClipPos  : SV_Position;
//     float3 WorldPos : WORLD_POS;
//     float4 Color    : COLOR;
//     float3 Normal   : NORMAL;
//     float2 UV0      : UV0;
//     float2 UV1      : UV1;
// };


#ifndef USE_TEXTURE_ATLAS
#   define USE_TEXTURE_ATLAS 0
#endif

#ifndef ALLOW_DEBUG_VIEW
#   define ALLOW_DEBUG_VIEW 0
#endif

#if USE_TEXTURE_ATLAS
#   include "AtlasSampling.fxh"
#endif

cbuffer cbCameraAttribs
{
    CameraAttribs g_CameraAttribs;
}

cbuffer cbLightAttribs
{
    LightAttribs g_LightAttribs;
}

cbuffer cbPBRAttribs
{
    PBRShaderAttribs g_PBRAttribs;
}

#if USE_IBL
    TextureCube  g_IrradianceMap;
    SamplerState g_IrradianceMap_sampler;

    TextureCube  g_PrefilteredEnvMap;
    SamplerState g_PrefilteredEnvMap_sampler;

    Texture2D     g_BRDF_LUT;
    SamplerState  g_BRDF_LUT_sampler;
#endif

#if USE_COLOR_MAP
    Texture2DArray g_ColorMap;
    SamplerState   g_ColorMap_sampler;
#endif

#if USE_METALLIC_MAP
    Texture2DArray g_MetallicMap;
    SamplerState   g_MetallicMap_sampler;
#endif

#if USE_ROUGHNESS_MAP
    Texture2DArray g_RoughnessMap;
    SamplerState   g_RoughnessMap_sampler;
#endif

#if USE_PHYS_DESC_MAP
    Texture2DArray g_PhysicalDescriptorMap;
    SamplerState   g_PhysicalDescriptorMap_sampler;
#endif

#if USE_NORMAL_MAP
    Texture2DArray g_NormalMap;
    SamplerState   g_NormalMap_sampler;
#endif

#if USE_AO_MAP
    Texture2DArray g_AOMap;
    SamplerState   g_AOMap_sampler;
#endif

#if USE_EMISSIVE_MAP
    Texture2DArray g_EmissiveMap;
    SamplerState   g_EmissiveMap_sampler;
#endif


float2 SelectUV(VSOutput VSOut, float Selector)
{
#if USE_TEXCOORD0 && USE_TEXCOORD1
    return lerp(VSOut.UV0, VSOut.UV1, Selector);
#elif USE_TEXCOORD0
    return VSOut.UV0;
#elif USE_TEXCOORD1
    return VSOut.UV1;
#else
    return float2(0.0, 0.0);
#endif
}

float4 SampleTexture(Texture2DArray Tex,
                     SamplerState   Tex_sampler,
                     VSOutput       VSOut,
                     float          Selector, 
                     float4         ScaleBias,
                     float          Slice,
                     float4         DefaultValue)
{
#   if USE_TEXCOORD0 || USE_TEXCOORD1
    {
        float2 UV = SelectUV(VSOut, Selector);
#       if USE_TEXTURE_ATLAS
        {
            if (Selector < 0.0)
            {
                return DefaultValue;
            }
            else
            {
                SampleTextureAtlasAttribs SampleAttribs;
                SampleAttribs.f2UV                   = frac(UV) * ScaleBias.xy + ScaleBias.zw;
                SampleAttribs.f2SmoothUV             = UV * ScaleBias.xy;
                SampleAttribs.f2dSmoothUV_dx         = ddx(UV) * ScaleBias.xy;
                SampleAttribs.f2dSmoothUV_dy         = ddy(UV) * ScaleBias.xy;
                SampleAttribs.fSlice                 = Slice;
                SampleAttribs.f4UVRegion             = ScaleBias;
                SampleAttribs.fSmallestValidLevelDim = 4.0;
                SampleAttribs.IsNonFilterable        = false;
                return SampleTextureAtlas(Tex, Tex_sampler, SampleAttribs);
            }
        }
#       else
        {
            return Tex.Sample(Tex_sampler, float3(UV, Slice));
        }
#       endif
    }
#   else
    {
        return DefaultValue;
    }
#   endif
}

float4 GetBaseColor(VSOutput VSOut)
{
    float4 BaseColor = float4(1.0, 1.0, 1.0, 1.0);

#   if USE_COLOR_MAP
    {
        BaseColor = SampleTexture(g_ColorMap,
                                  g_ColorMap_sampler,
                                  VSOut,
                                  g_PBRAttribs.Material.BaseColorTextureUVSelector,
                                  g_PBRAttribs.Material.BaseColorUVScaleBias,
                                  g_PBRAttribs.Material.BaseColorSlice,
                                  float4(1.0, 1.0, 1.0, 1.0));
        BaseColor = float4(TO_LINEAR(BaseColor.rgb), BaseColor.a);
    }
#   endif

#   if USE_VERTEX_COLORS
    {
        BaseColor *= VSOut.Color;
    }
#   endif
    return BaseColor * g_PBRAttribs.Material.BaseColorFactor;
}

float3 GetMicroNormal(VSOutput VSOut,
                      float2 NormalMapUV,
                      float2 dNormalMapUV_dx,
                      float2 dNormalMapUV_dy)
{
    float3 MicroNormal = float3(0.5, 0.5, 1.0);

#   if USE_NORMAL_MAP && (USE_TEXCOORD0 || USE_TEXCOORD1)
    {
#       if USE_TEXTURE_ATLAS
        {
            if (g_PBRAttribs.Material.NormalTextureUVSelector >= 0.0)
            {
                SampleTextureAtlasAttribs SampleAttribs;
                SampleAttribs.f2UV                   = NormalMapUV;
                SampleAttribs.f2SmoothUV             = SelectUV(VSOut, g_PBRAttribs.Material.NormalTextureUVSelector) * g_PBRAttribs.Material.NormalMapUVScaleBias.xy;
                SampleAttribs.f2dSmoothUV_dx         = dNormalMapUV_dx;
                SampleAttribs.f2dSmoothUV_dy         = dNormalMapUV_dy;
                SampleAttribs.fSlice                 = g_PBRAttribs.Material.NormalSlice;
                SampleAttribs.f4UVRegion             = g_PBRAttribs.Material.NormalMapUVScaleBias;
                SampleAttribs.fSmallestValidLevelDim = 4.0;
                SampleAttribs.IsNonFilterable        = false;
                MicroNormal = SampleTextureAtlas(g_NormalMap, g_NormalMap_sampler, SampleAttribs).xyz;
            }
        }
#       else
        {
            MicroNormal = g_NormalMap.Sample(g_NormalMap_sampler, float3(NormalMapUV, g_PBRAttribs.Material.NormalSlice)).xyz;
        }
#       endif
    }
#endif

    return MicroNormal * float3(2.0, 2.0, 2.0) - float3(1.0, 1.0, 1.0);
}

float GetOcclusion(VSOutput VSOut)
{
    float Occlusion = 1.0;
#   if USE_AO_MAP
    {
        Occlusion = SampleTexture(g_AOMap,
                                  g_AOMap_sampler,
                                  VSOut,
                                  g_PBRAttribs.Material.OcclusionTextureUVSelector,
                                  g_PBRAttribs.Material.OcclusionUVScaleBias,
                                  g_PBRAttribs.Material.OcclusionSlice,
                                  float4(1.0, 1.0, 1.0, 1.0)).r;
    }
#   endif
    return Occlusion * g_PBRAttribs.Material.OcclusionFactor;
}

float3 GetEmissive(VSOutput VSOut)
{
    float3 Emissive = float3(0.0, 0.0, 0.0);
    
#   if USE_EMISSIVE_MAP
    {
        Emissive = SampleTexture(g_EmissiveMap,
                                 g_EmissiveMap_sampler,
                                 VSOut,
                                 g_PBRAttribs.Material.EmissiveTextureUVSelector,
                                 g_PBRAttribs.Material.EmissiveUVScaleBias,
                                 g_PBRAttribs.Material.EmissiveSlice,
                                 float4(0.0, 0.0, 0.0, 0.0)).rgb;
        Emissive = TO_LINEAR(Emissive);
    }
#   endif
    return Emissive * g_PBRAttribs.Material.EmissiveFactor.rgb;
}

float4 GetPhysicalDesc(VSOutput VSOut)
{
    // Set defaults to 1 so that if the textures are not available, the values
    // are controlled by the metallic/roughness scale factors.
    float4 PhysicalDesc = float4(1.0, 1.0, 1.0, 1.0);
#   if USE_PHYS_DESC_MAP
    {
        PhysicalDesc = SampleTexture(g_PhysicalDescriptorMap,
                                     g_PhysicalDescriptorMap_sampler,
                                     VSOut,
                                     g_PBRAttribs.Material.PhysicalDescriptorTextureUVSelector,
                                     g_PBRAttribs.Material.PhysicalDescriptorUVScaleBias,
                                     g_PBRAttribs.Material.PhysicalDescriptorSlice,
                                     float4(1.0, 1.0, 1.0, 1.0));
    }
#   else
    {
#       if USE_METALLIC_MAP
        {
            PhysicalDesc.b = SampleTexture(g_MetallicMap,
                                           g_MetallicMap_sampler,
                                           VSOut,
                                           g_PBRAttribs.Material.PhysicalDescriptorTextureUVSelector,
                                           g_PBRAttribs.Material.PhysicalDescriptorUVScaleBias,
                                           g_PBRAttribs.Material.PhysicalDescriptorSlice,
                                           float4(1.0, 1.0, 1.0, 1.0)).r;
        }
#       endif

#       if USE_ROUGHNESS_MAP
        {
            PhysicalDesc.g = SampleTexture(g_RoughnessMap,
                                           g_RoughnessMap_sampler,
                                           VSOut,
                                           g_PBRAttribs.Material.PhysicalDescriptorTextureUVSelector,
                                           g_PBRAttribs.Material.PhysicalDescriptorUVScaleBias,
                                           g_PBRAttribs.Material.PhysicalDescriptorSlice,
                                           float4(1.0, 1.0, 1.0, 1.0)).r;
        
        }
#       endif
    }
#endif 
 
    return PhysicalDesc;
}

void main(in  VSOutput VSOut,
          in  bool     IsFrontFace : SV_IsFrontFace,
          out float4   OutColor    : SV_Target)
{
    float4 BaseColor = GetBaseColor(VSOut);

    float2 NormalMapUV  = SelectUV(VSOut, g_PBRAttribs.Material.NormalTextureUVSelector);

    // We have to compute gradients in uniform flow control to avoid issues with perturbed normal
    float3 dWorldPos_dx = ddx(VSOut.WorldPos);
    float3 dWorldPos_dy = ddy(VSOut.WorldPos);
    float2 dNormalMapUV_dx = ddx(NormalMapUV);
    float2 dNormalMapUV_dy = ddy(NormalMapUV);
#if USE_TEXTURE_ATLAS
    {
        NormalMapUV = frac(NormalMapUV);
        NormalMapUV = NormalMapUV * g_PBRAttribs.Material.NormalMapUVScaleBias.xy + g_PBRAttribs.Material.NormalMapUVScaleBias.zw;
        dNormalMapUV_dx *= g_PBRAttribs.Material.NormalMapUVScaleBias.xy;
        dNormalMapUV_dy *= g_PBRAttribs.Material.NormalMapUVScaleBias.xy;
    }
#endif

    if (g_PBRAttribs.Material.AlphaMode == PBR_ALPHA_MODE_MASK && BaseColor.a < g_PBRAttribs.Material.AlphaMaskCutoff)
    {
        discard;
    }

    float3 TSNormal     = GetMicroNormal(VSOut, NormalMapUV, dNormalMapUV_dx, dNormalMapUV_dy);
    float  Occlusion    = GetOcclusion(VSOut);
    float3 Emissive     = GetEmissive(VSOut);
    float4 PhysicalDesc = GetPhysicalDesc(VSOut);

     if (g_PBRAttribs.Material.Workflow == PBR_WORKFLOW_SPECULAR_GLOSINESS)
    {
        PhysicalDesc.rgb = TO_LINEAR(PhysicalDesc.rgb) * g_PBRAttribs.Material.SpecularFactor.rgb;
        const float u_GlossinessFactor = 1.0;
        PhysicalDesc.a *= u_GlossinessFactor;
    }
    else if (g_PBRAttribs.Material.Workflow == PBR_WORKFLOW_METALLIC_ROUGHNESS)
    {
        // PhysicalDesc should already be in linear space
        PhysicalDesc.g = saturate(PhysicalDesc.g * g_PBRAttribs.Material.RoughnessFactor);
        PhysicalDesc.b = saturate(PhysicalDesc.b * g_PBRAttribs.Material.MetallicFactor);
    }
    float metallic = 0.0;
    SurfaceReflectanceInfo SrfInfo = GetSurfaceReflectance(g_PBRAttribs.Material.Workflow, BaseColor, PhysicalDesc, metallic);

    float3 view = normalize(g_CameraAttribs.f4Position.xyz - VSOut.WorldPos.xyz); // Direction from surface point to camera

    float3 color           = BaseColor.rgb;
    float3 perturbedNormal = float3(0.0, 0.0, 0.0);
    float3 DirectLighting  = float3(0.0, 0.0, 0.0);

    IBL_Contribution IBLContrib;
    IBLContrib.f3Diffuse  = float3(0.0, 0.0, 0.0);
    IBLContrib.f3Specular = float3(0.0, 0.0, 0.0);

#if USE_VERTEX_NORMALS
    {
        // LIGHTING
        perturbedNormal = PerturbNormal(dWorldPos_dx,
                                        dWorldPos_dy,
                                        dNormalMapUV_dx,
                                        dNormalMapUV_dy,
                                        VSOut.Normal,
                                        TSNormal,
                                        g_PBRAttribs.Material.NormalTextureUVSelector >= 0.0,
                                        IsFrontFace);

        DirectLighting = ApplyDirectionalLight(g_LightAttribs.f4Direction.xyz, g_LightAttribs.f4Intensity.rgb, SrfInfo, perturbedNormal, view);
        color = DirectLighting;

        //#ifdef USE_PUNCTUAL
        //    for (int i = 0; i < LIGHT_COUNT; ++i)
        //    {
        //        Light light = u_Lights[i];
        //        if (light.type == LightType_Directional)
        //        {
        //            color += applyDirectionalLight(light, materialInfo, normal, view);
        //        }
        //        else if (light.type == LightType_Point)
        //        {
        //            color += applyPointLight(light, materialInfo, normal, view);
        //        }
        //        else if (light.type == LightType_Spot)
        //        {
        //            color += applySpotLight(light, materialInfo, normal, view);
        //        }
        //    }
        //#endif
        //

        // Calculate lighting contribution from image based lighting source (IBL)
#       if USE_IBL
        {
            IBLContrib =
                GetIBLContribution(SrfInfo, perturbedNormal, view, float(g_PBRAttribs.Renderer.PrefilteredCubeMipLevels),
                                   g_BRDF_LUT,          g_BRDF_LUT_sampler,
                                   g_IrradianceMap,     g_IrradianceMap_sampler,
                                   g_PrefilteredEnvMap, g_PrefilteredEnvMap_sampler);
            color += (IBLContrib.f3Diffuse + IBLContrib.f3Specular) * g_PBRAttribs.Renderer.IBLScale;
        }
#       endif
    }
#   endif

#   if USE_AO_MAP
    {
        color = lerp(color, color * Occlusion, g_PBRAttribs.Renderer.OcclusionStrength);
    }
#endif

#   if USE_EMISSIVE_MAP
    {
        color += Emissive.rgb * g_PBRAttribs.Renderer.EmissionScale;
    }
#   endif

    // Perform tone mapping
    ToneMappingAttribs TMAttribs;
    TMAttribs.iToneMappingMode     = TONE_MAPPING_MODE_UNCHARTED2;
    TMAttribs.bAutoExposure        = false;
    TMAttribs.fMiddleGray          = g_PBRAttribs.Renderer.MiddleGray;
    TMAttribs.bLightAdaptation     = false;
    TMAttribs.fWhitePoint          = g_PBRAttribs.Renderer.WhitePoint;
    TMAttribs.fLuminanceSaturation = 1.0;
    color = ToneMap(color, TMAttribs, g_PBRAttribs.Renderer.AverageLogLum);

    // Add highlight color
    color = lerp(color, g_PBRAttribs.Renderer.HighlightColor.rgb, g_PBRAttribs.Renderer.HighlightColor.a);

    OutColor = float4(color, BaseColor.a);

#   if ENABLE_DEBUG_VIEW
    // Shader inputs debug visualization
    if (g_PBRAttribs.Renderer.DebugViewType != 0)
    {
        switch (g_PBRAttribs.Renderer.DebugViewType)
        {
            case DEBUG_VIEW_BASE_COLOR:       OutColor.rgba = BaseColor;                                            break;
#   if USE_TEXCOORD0
            case DEBUG_VIEW_TEXCOORD0:        OutColor.rgb  = float3(VSOut.UV0, 0.0);                               break;
#   endif
            case DEBUG_VIEW_TRANSPARENCY:     OutColor.rgba = float4(BaseColor.a, BaseColor.a, BaseColor.a, 1.0);   break;
            case DEBUG_VIEW_NORMAL_MAP:       OutColor.rgb  = TSNormal.xyz;                                         break;
            case DEBUG_VIEW_OCCLUSION:        OutColor.rgb  = Occlusion * float3(1.0, 1.0, 1.0);                    break;
            case DEBUG_VIEW_EMISSIVE:         OutColor.rgb  = Emissive.rgb;                                         break;
            case DEBUG_VIEW_METALLIC:         OutColor.rgb  = metallic * float3(1.0, 1.0, 1.0);                     break;
            case DEBUG_VIEW_ROUGHNESS:        OutColor.rgb  = SrfInfo.PerceptualRoughness * float3(1.0, 1.0, 1.0);  break;
            case DEBUG_VIEW_DIFFUSE_COLOR:    OutColor.rgb  = SrfInfo.DiffuseColor;                                 break;
            case DEBUG_VIEW_SPECULAR_COLOR:   OutColor.rgb  = SrfInfo.Reflectance0;                                 break;
            case DEBUG_VIEW_REFLECTANCE90:    OutColor.rgb  = SrfInfo.Reflectance90;                                break;
#   if USE_VERTEX_NORMALS
            case DEBUG_VIEW_MESH_NORMAL:      OutColor.rgb  = abs(VSOut.Normal / max(length(VSOut.Normal), 1e-3));  break;
            case DEBUG_VIEW_PERTURBED_NORMAL: OutColor.rgb  = abs(perturbedNormal);                                 break;
            case DEBUG_VIEW_NDOTV:            OutColor.rgb  = dot(perturbedNormal, view) * float3(1.0, 1.0, 1.0);   break;
            case DEBUG_VIEW_DIRECT_LIGHTING:  OutColor.rgb  = DirectLighting;                                       break;
#   endif
#   if USE_IBL
            case DEBUG_VIEW_DIFFUSE_IBL:      OutColor.rgb  = IBLContrib.f3Diffuse;                                 break;
            case DEBUG_VIEW_SPECULAR_IBL:     OutColor.rgb  = IBLContrib.f3Specular;                                break;
#   endif
        }
    }
#   endif

#   if CONVERT_OUTPUT_TO_SRGB
    {
        OutColor.rgb = FastLinearToSRGB(OutColor.rgb);
    }
#   endif
}
