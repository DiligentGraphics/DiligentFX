#include "PBR_PrecomputeCommon.fxh"
#include "ShaderUtilities.fxh"

#ifndef OPTIMIZE_SAMPLES
#   define OPTIMIZE_SAMPLES 1
#endif

#if ENV_MAP_TYPE == ENV_MAP_TYPE_CUBE
TextureCube  g_EnvironmentMap;
#elif ENV_MAP_TYPE == ENV_MAP_TYPE_SPHERE
Texture2D    g_EnvironmentMap;
#endif
SamplerState g_EnvironmentMap_sampler;

cbuffer FilterAttribs
{
    float4x4 g_RotationUnused;

    float g_Roughness;
    float g_EnvMapWidth;
    float g_EnvMapHeight;
    float g_EnvMipCount;
    
    uint  g_NumSamples;
    uint  _Padding0;
    uint  _Padding1;
    uint  _Padding2;
}

float3 SampleEnvrionmentMap(float3 R, float MipLevel)
{
#if ENV_MAP_TYPE == ENV_MAP_TYPE_CUBE
    return g_EnvironmentMap.SampleLevel(g_EnvironmentMap_sampler, R, MipLevel).rgb;
#elif ENV_MAP_TYPE == ENV_MAP_TYPE_SPHERE
    return g_EnvironmentMap.SampleLevel(g_EnvironmentMap_sampler, TransformDirectionToSphereMapUV(R), MipLevel).rgb;
#endif
}

// https://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_notes_v2.pdf
float3 PrefilterEnvMap( float PerceptualRoughness, float3 R )
{
    // https://bruop.github.io/ibl/
    // Even though all papers describe split-sum approximation as
    //
    //      [(1/N) Sum_i{ L(li) }] * [(1/N) Sum_i{ f(v, li)  * (n, li) / pdf(v, li) }]
    //
    // What is actually computed instead of the first sum is
    //
    //      (4 / Sum_i{ (n, li) } * Sum_i{ (n, li) * L(li) * (v,h) / (D(h) * (n,h)) }
    //
    // Karis doesn't provide any mathematic justification for the additional summation in the denominator, or why we should evaluate
    // Li importance sampling GGX. These empirical terms seem to provide the best correction for our split sum approximation for a constant Li.
    
    float3 N = R;
    float3 V = R;
    float3 PrefilteredColor = float3(0.0, 0.0, 0.0);
    float TotalWeight = 0.0;
    for( uint i = 0u; i < g_NumSamples; i++ )
    {
        float2 Xi = Hammersley2D( i, g_NumSamples );
        float3 H  = ImportanceSampleGGX( Xi, PerceptualRoughness, N );
        float3 L  = 2.0 * dot(V, H) * H - V;
        float NoL = clamp(dot(N, L), 0.0, 1.0);
        float VoH = clamp(dot(V, H), 0.0, 1.0);
        if(NoL > 0.0 && VoH > 0.0)
        {
#if OPTIMIZE_SAMPLES
            // https://placeholderart.wordpress.com/2015/07/28/implementation-notes-runtime-environment-map-filtering-for-image-based-lighting/

            float NoH = clamp(dot(N, H), 0.0, 1.0);

            // Probability Distribution Function
            float AlphaRoughness = PerceptualRoughness * PerceptualRoughness;
            float pdf = max(SmithGGXSampleDirectionPDF(V, N, L, AlphaRoughness), 0.0001);
           
            // Solid angle of current smple
            float OmegaS = 1.0 / (float(g_NumSamples) * pdf);

#if ENV_MAP_TYPE == ENV_MAP_TYPE_CUBE
            // Solid angle of 1 pixel across all cube faces
            float OmegaP = ComputeCubeMapPixelSolidAngle(g_EnvMapWidth, g_EnvMapHeight);
#else
            // Solid angle of 1 pixel on sphere
            float OmegaP = ComputeSphereMapPixelSolidAngle(g_EnvMapWidth, g_EnvMapHeight, acos(L.y), 1.0);
#endif
            // Applying mip bias produces better results, especially for environment maps with
            // very bright spots.
            float MipBias = 1.0;
            float MipLevel = (AlphaRoughness == 0.0) ? 0.0 : clamp(0.5 * log2(OmegaS / max(OmegaP, 1e-10)) + MipBias, 0.0, g_EnvMipCount - 1.0);
#else
            float MipLevel = 0.0;
#endif
            PrefilteredColor += SampleEnvrionmentMap(L, MipLevel) * NoL;
            TotalWeight += NoL; // Sum_i{ (n, li) } 
        }
    }
    return PrefilteredColor / TotalWeight;
}


void main(in float4  Pos      : SV_Position,
          in float3  WorldPos : WORLD_POS,
          out float4 Color    : SV_Target)
{		
    float3 R = normalize(WorldPos);
    Color.rgb = PrefilterEnvMap(g_Roughness, R);
    Color.a = 0.0;
}
