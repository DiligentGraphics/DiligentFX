#include "BasicStructures.fxh"
#include "BoundBoxStructures.fxh"

#if COMPUTE_MOTION_VECTORS
#include "ShaderUtilities.fxh"
#endif

cbuffer cbCameraAttribs
{
    CameraAttribs g_Camera;
    CameraAttribs g_PrevCamera;
}

cbuffer cbBoundBoxAttribs
{
    BoundBoxAttribs g_Attribs;
}

struct BoundBoxOutput
{
    float4 Color;
#if COMPUTE_MOTION_VECTORS
    float2 MotionVector;
#endif
};

BoundBoxOutput GetBoundBoxOutput(BoundBoxVSOutput VSOut)
{
    BoundBoxOutput Output;
    Output.Color = g_Attribs.Color;

    float DistToEdgeStart = length((VSOut.ClipPos.xy / VSOut.ClipPos.w - VSOut.EdgeStartClipPos.xy / VSOut.EdgeStartClipPos.w) * g_Camera.f4ViewportSize.xy);
    float PatternPos      = frac(DistToEdgeStart / g_Attribs.PatternLength);
    uint  PatternBit      = min(uint(PatternPos * g_Attribs.PatternLength), 31u);
    if ((g_Attribs.PatternMask & (1u << PatternBit)) == 0u)
        discard;
    
#if COMPUTE_MOTION_VECTORS
    Output.MotionVector = GetMotionVector(
        VSOut.ClipPos.xy / VSOut.ClipPos.w,
        VSOut.PrevClipPos.xy / VSOut.PrevClipPos.w,
        g_Camera.f2Jitter,
        g_PrevCamera.f2Jitter
    );
#endif

    return Output;
}

#include "PSMainGenerated.generated"
//void main(in BoundBoxVSOutput VSOut,
//          out float4 Color : SV_Target)
//{
//    Color = GetBoundBoxOutput(VSOut).Color;
//}
