#include "BasicStructures.fxh"
#include "ToneMapping.fxh"
#include "ShaderUtilities.fxh"

cbuffer cbCameraAttribs
{
    CameraAttribs g_Camera;
    CameraAttribs g_PrevCamera;
}

cbuffer cbEnvMapRenderAttribs
{
    ToneMappingAttribs g_ToneMappingAttribs;

    float g_AverageLogLum;
    float g_MipLevel;
    float g_Alpha;
    float Unusued2;
    
    float4 g_Scale;
}

#if ENV_MAP_TYPE == ENV_MAP_TYPE_CUBE
TextureCube  EnvMap;
#elif ENV_MAP_TYPE == ENV_MAP_TYPE_SPHERE
Texture2D    EnvMap;
#endif
SamplerState EnvMap_sampler;

float3 SampleEnvrionmentMap(float3 R, float g_MipLevel)
{
#if ENV_MAP_TYPE == ENV_MAP_TYPE_CUBE
    return EnvMap.SampleLevel(EnvMap_sampler, R, g_MipLevel).rgb;
#elif ENV_MAP_TYPE == ENV_MAP_TYPE_SPHERE
    return EnvMap.SampleLevel(EnvMap_sampler, TransformDirectionToSphereMapUV(R), g_MipLevel).rgb;
#endif
}

struct SampleEnvMapOutput
{
    float4 Color;
    float2 MotionVector;
};

SampleEnvMapOutput SampleEnvMap(in float4 ClipPos)
{
    float4 WorldPos  = mul(ClipPos, g_Camera.mViewProjInv);
    float3 Direction = WorldPos.xyz / WorldPos.w - g_Camera.f4Position.xyz;
    float3 Color = SampleEnvrionmentMap(normalize(Direction), g_MipLevel) * g_Scale.rgb;

#if TONE_MAPPING_MODE > TONE_MAPPING_MODE_NONE    
    Color.rgb = ToneMap(Color.rgb, g_ToneMappingAttribs, g_AverageLogLum);
#endif

#if CONVERT_OUTPUT_TO_SRGB
    Color.rgb = pow(Color.rgb, float3(1.0 / 2.2, 1.0 / 2.2, 1.0 / 2.2));
#endif

    float2 MotionVector = float2(0.0, 0.0);
#if COMPUTE_MOTION_VECTORS
    float3 PrevWorldPos = g_PrevCamera.f4Position.xyz + Direction;
    float4 PrevClipPos = mul(float4(PrevWorldPos, 1.0), g_PrevCamera.mViewProj);
    PrevClipPos.xy /= PrevClipPos.w;
    MotionVector = GetMotionVector(ClipPos.xy, PrevClipPos.xy, g_Camera.f2Jitter, g_PrevCamera.f2Jitter);
#endif

    SampleEnvMapOutput Output;
    Output.Color        = float4(Color.rgb, g_Alpha);
    Output.MotionVector = MotionVector;
    return Output;
}

#include "PSMainGenerated.generated"
// void main(in  float4 Pos     : SV_Position,
//           in  float4 ClipPos : CLIP_POS,
//           out float4 Color   : SV_Target)
// {
//     Color = SampleEnvMap(ClipPos).Color;
// }
